"How do you define a variable in Ruby? Call this variable something like ""my first variable"" and set it equal to 10."	my_first_variable = 10
Do the basic for loop in Javascript but change it to a Ruby loop. Count up to 10 from 1 and return the result	idx = 0<div>count = 0<br><div>while idx <= 10</div><div>&nbsp; &nbsp;count += idx</div></div><div>&nbsp; &nbsp;idx += 1</div><div>end</div><div><br></div><div>return count</div>
"create a function called ""do this"" in Ruby"	def do_this<div><br></div><div>#body content</div><div><br></div><div>end</div>
In ruby, what do you get when you divide 10/3? What do you call a decimal in ruby?	3. A decimal is called a float.
"Show the two ways that you can create an array. Call this array ""my new array"" and keep it empty."	my_new_array = []<div>my_new_array = Array.new</div>
"Here is an array:<div><br></div><div>some_fruits = [""apple"", ""orange"", ""banana""]</div><div><br></div><div>How would you access and output all three items in the array up to and including the last item? How would you access and output all three items in the array excluding the last item?</div>"	puts some_fruits[0..2]<div>puts some_fruits[0...2]</div>
"fruits = [""apple"", ""orange"", ...]<div><br></div><div>Lets say you don't know how long the following array is but you want to grab every value from index 3 to the very end of the array. How would you do that?</div>"	fruits[3..-1]
"Use an iterator to use the following array to create the below output (not a loop).<div><br></div><div>cool_things = [""race cars"", ""lasers"", ""aeroplanes""]</div><div><br></div><div># prints:</div><div>#I like race cars!</div><div>#I like lasers!</div><div>#I like aeroplanes!</div>"	"cool_things.each do | cool_thing |<div>&nbsp; &nbsp;puts ""I like #{cool_thing}!""</div><div>end</div>"
What must you never modify in a loop and why?	You should never modify the array that is used for the length because crazy things can happen.
"What does the ""<<"" operator do in Ruby? What do you call it?"	"It is called the shovel operator. It shovels things into an array like the push method does. Here's an example:<div><br></div><div>fruits = []</div><div><br></div><div>fruits << ""pear""</div><div>fruits << ""banana""</div><div>fruits << ""apple""</div><div><br></div><div>puts fruits</div><div><br></div><div>[""pear"", ""banana"", ""apple""]</div>"
Concatenate these two arrays<div><br></div><div>first_array = [1,2,3]</div><div>second_array = [4,5,6]</div>	new_array = first_array + second_array<div><br></div><div>**Note that this returns a new array. It does not modify the existing arrays.</div>
"What two ways can you measure the size of an array? Why would you use one over the other?<div><br></div><div>Here's the array to use:</div><div><br></div><div>fruits = [""apple"", ""orange"", ""banana""]</div>"	fruits.count<div><br></div><div>#3</div><div><br></div><div>fruits.empty?</div><div><br></div><div>#false</div><div><br></div><div>You would use one over the other if it is more expressive</div>
Add 4 to the end of the following array:<div><br></div><div>numbers = [1,2,3]</div><div><br></div><div>Now remove that same item</div>	numbers << 4<div>puts(numbers)</div><div><br></div><div>#[1,2,3,4]</div><div><div><br></div><div>numbers.pop</div><div>puts(numbers)</div></div><div><br></div><div>#[1,2,3]</div>
What does .pop return?	It returns the last item in an array
How would you use push (shovel) and delete_at together like a queue (Think Apple music)	"song_queue = []<div><br></div><div>#Here's you adding songs to the queue</div><div><br></div><div>song_queue << ""Cheap Thrills""</div><div>song_queue << ""Be As You Are""</div><div>song_queue << ""False Alarm""</div><div><br></div><div>#When you just finished listening the ""Cheap Thrills""</div><div><br></div><div>song_queue.delete_at(0)</div><div><br></div><div>puts(song_queue)</div><div><br></div><div>#song_queue = [""Be As You Are"", ""False Alarm""]</div>"
"What's the opposite of shovel (push) and pop? How would you use these with the following array?<div><br></div><div>fruits = [""apple"", ""banana"", ""orange""]</div><div><br></div><div><br></div>"	"<div>puts(fruits.shift)</div><div>puts(fruits)</div><div><br></div><div># ""apple""</div><div>#[""banana"", ""orange""]</div><div><br></div><div>fruits.unshift(""apple"")</div><div>puts(fruits)</div><div><br></div><div># [""apple"", ""banana"", ""orange""]</div>"
What is string interpolation? How do you use it?	String interpolation is used when you want to execute code inside of a string. You use it by adding #{ &nbsp; code goes here &nbsp; &nbsp;}
"Describe what each of the following do or what they would return:<div><br></div><div>fruits =[""banana"", ""apple"", ""banana""]</div><div><br></div><div>fruits.each ....</div><div><br></div><div>fruits[i] .....</div><div><br></div><div>fruits.include?(""apple"") ....</div><div><br></div><div>fruits.index(""apple"") ....</div><div><br></div><div>fruits.index(""pear"") ....</div>"	"The first one is used to loop through everything in an array in order.<div><br></div><div>The second one is used to loop through an array by position.</div><div><br></div><div>The third would return ""true"".</div><div><br></div><div>The fourth would return the index ""1"".</div><div><br></div><div>The last would return the ""nil"" because the object doesn't exist in the array.</div>"
What does following method do?<div><br></div><div>arr.sort</div><div><br></div><div>What is the difference between that and the following?</div><div><br></div><div>arr.sort!</div><div><br></div><div>What are the tradeoffs?</div>	The sort method organizes an array's objects in ascending order in a new array and return the new array. The sort! method modifies the array you started with. The sort method is a safe method and the sort! method is an unsafe method. The advantage with the unsafe method is that there is a slight performance increase because you aren't creating new variables but you shouldn't use it unless you start noticing performance issues.
"Sort the following array in a random order using the ________ method:<div><br></div><div>fruits = [""orange"", ""apple"", ""pear""]</div>"	fruits.shuffle
"What's an easiest way to do get ""orange"" and ""banana"" from the following array?<div><br /></div><div>fruits = [""orange"", ""apple"", ""banana""]</div><div><br /></div><div>orange = ?</div><div><br /></div><div>banana = ?</div>"	orange = fruits.first<div>banana = fruits.last</div>
die = [1,2,3,4,5,6]<div><br></div><div>How would you select a number at random from the array (playing risk for example) where every number has an equal chance of being selected?</div>	roll1 = die.sample<div>roll2 = die.sample</div>
"Let's say an array contains the following<div><br></div><div>[""Honda"", ""Apple"", ""Toyota"", ""Coke""]</div><div><br></div><div>What would be an appropriate name and why?</div>"	"brands<div><br></div><div>Because when you go through an iteration loop using each, it improves code legibility:</div><div><br></div><div>brands.each do |brand|</div><div>&nbsp; &nbsp;puts (""All these are brands: #{brands.join("", "")}."")</div><div>end</div>"
"What is the word used to describe the following array (from Greek for ""different kinds"")<div><br></div><div>mish_mosh = [""racecars"", 42, { :name => ""Gizmo"" , :species => ""cat""}]<br></div><div><br></div><div>Where is this array used?</div>"	They are called heterogeneous arrays. It is seldom used because it's a mess and you want to create arrays that have similar things in them.
What does the following do to this array:<div><br></div><div>result = [1,1,1,2,3,3,2,5].uniq</div>	It removes duplicates from the array. It will return a new array stored in the result variable that has the following [1, 2, 3, 5].
What's special about ruby classes (i.e. Array, String, etc)? What do you call it when something is added to these classes?	They are open, meaning we can add things to them. When you add something after the fact, it is called monkey patching. It is generally frowned upon but can be useful.
How would you add a function to the Array class?	class Array<div>&nbsp; &nbsp;def my_function</div><div>&nbsp; &nbsp; &nbsp; #body&nbsp;</div><div>&nbsp; &nbsp;end</div><div>end</div>
"How would you use ""self"" in a new method added to a Ruby class? Let's say it's used in the class Array."	class Array<div>&nbsp; &nbsp;def give_me_first</div><div>&nbsp; &nbsp; &nbsp; if self.count > 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return self[0]</div><div>&nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return nil</div><div>&nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp;end</div><div>end</div>
"What can you do to include text in a string?<div><br></div><div>For example, write a string that says:</div><div><br></div><div>Jen said, ""Guys, I have to leave.""</div>"	"You would use the single quotation marks with double quotation marks. For example:<div><br></div><div>'Jen said, ""Guys, I have to leave.""'</div>"
"What is the escape character in a string? For example, let's say you want to use double quotation marks and single quotation marks in your string.&nbsp;<div><br></div><div>Ex. &nbsp;She said, ""Right, you were at the 'party'.""</div>"	"""She said, \""Right, you were at the 'party'.\"""""
How long should string interpolation be?	Only a line or so. If it's longer, do the longer code and set it equal to a variable and then put the variable inside the string interpolation.
What quotes should you use for string interpolation?	Only double quotes. It won't work with single quotes.
"What's the preferred way to add to a string?<div><br></div><div>Ex.&nbsp;</div><div><br></div><div>my_sentence = ""I""</div><div><br></div><div>Now add in "" want to do something"" and "" very cool!""</div>"	"my_sentence << "" want to do something""<div><br></div><div>my_sentence << "" very cool!""</div>"
"How would you get the substring ""want"" from the following variable? List the two ways to do is using a range:<div><br></div><div>sentence = ""I want to go.""</div>"	sentence[2..5]<div>sentence[2...6]</div><div><br></div><div>It's important to note here that you use the square brackets and not parenthesis...parenthesis signifies you're using some sort of method and not a range or an index.</div>
How do you get a strings count?	<div>Well this is kind of a trick. Here's how you do it:</div><div><br></div>string.length
"Use the split method on the following string to get just the words (no commas, spaces, etc)<div><br></div><div>sentence = ""We are having a good time""</div>"	"sentence.split("" "")"
What will the following be:<div><br></div><div>nil.to_s</div>	"An empty string:<div><br></div><div>""""</div>"
How would you use the chomp method?	get.chomp<div><br></div><div>This ensures that Ruby doesn't capture the enter character.</div>
"Use the .strip and the .strip! method on both of the following strings. What do you think will be returned in each case?<div><br></div><div>""\ntime &nbsp; &nbsp; "".strip</div><div>""\ntime &nbsp; &nbsp; "".strip!</div><div>""time"".strip</div><div>""time"".strip!</div>"	"""time""<div>""time""</div><div>""time""</div><div>nil</div>"
REPLACE_ME	<br>
What does the .gsub method do? What is the first parameter usually passed to this method?	It is used on a string to replace a certain character or multiple character match with whatever you specify. It is usually used with a regexp (probably regular expression)
What is the syntax for the .gsub method?	"""Some string"".gsub(pattern, replacement)<div><br></div><div>""Some string"".gsub(pattern) { |match| block }</div><div><br></div><div>Where match is a match in the string and block uses the variable that is stored in match and does something with it before pushing it into the new string. By the way this method returns a new string.&nbsp;</div><div><br></div><div>As you could guess .gsub! alters the original string.&nbsp;</div>"
What would the .downcase and .upcase method return if nothing changed from the original string to the final string?	This is a trick question because it will just do what it is supposed to do. However if you use .downcase! or .upcase! and nothing changes, nil will be returned.
What does .to_i do to a string?	It returns the string numbers to integers and gets rid of anything else.
"What would the following return?<div><br></div><div>""a"".to_sym</div>"	:a<div><br></div><div>Not really sure why that's useful but App Academy wants me to know it.</div>
What is a hash?	It is similar to an object in Javascript.
Make a hash in the two ways it could be made. From there, define what the key and the value are. Then fill the hash with something.	"<div>Hash.new&nbsp;</div><div>some_hash = {}</div><div><br></div>my_first_hash = { ""name"" => ""Chase"", ""age"" => 24 }<div><br></div><div>The key unlocks the value so the keys are ""name"" and ""age"" and the values are ""Chase "" and 24.&nbsp;</div><div><br></div><div>my_first_hash[""name""] &nbsp; &nbsp; #returns ""Chase""</div>"
"How would you iterate over a hash? What is different about this iteration? Iterate over this hash:<div><br></div><div>about_me = { ""name"" => ""Chase"", ""age"" => 24 }</div><div><br></div><div><br></div>"	"<div>about_me.each do |key, value|</div><div>&nbsp; &nbsp;puts ""Hi my #{key} is #{value}</div><div>end</div>"
"How would you add something to the following hash?<div><br></div><div>info_about_me = {""name"" => ""Chase"", ""age"" => 24}</div><div><br></div><div><br></div>"	"info_about_me[""location""] = ""Sandy"""
"How would you delete your social security number from the following hash?<div><br></div><div>info = {""name"" => ""Chase"", ""age"" => 24, ""social security"" => 111111111}</div>"	"info.delete(""social security"")"
"test_hash = {""a"" => 25, ""b"" => 75}<div><br></div><div>Use a method that will delete a key/value pair from the array if a given condition is met. Don't use an iteration. Use the delete_if method.</div>"	test_hash.delete_if{|key, value| value < 50}
"Join the following two hashes into one hash:<div><br></div><div>nice_car_prices = {""lotus"" => 1000000, ""lambo"" => 2000000}</div><div>other_nice_cars = {""spider"" => 3000000}</div>"	"nice_car_prices.merge(other_nice_cars)<div><br></div><div># this will return a new hash with the following:</div><div><br></div><div>{""lotus"" => 1000000, ""lambo"" => 2000000, ""spider"" => 3000000}</div>"
What's the difference between .merge and .merge! ?	.merge creates a new hash while .merge! alters the original hash.
"<span style=""font-family: arial; text-align: center;"">How would you get an array of all the keys in the following hash? Of all the values? What if you want to check if there is already a key in the given hash? Use the following as examples:</span><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">cars = {""Toyota"" => ""midrange"", ""Ferrari"" => ""high end"", ""Vespa"" => ""low end""}</div>"	"<span style=""font-family: arial; text-align: center;"">cars.keys</span><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">#would return and array (i.e. [""Toyota"", ""Ferrari"", ""Vespa""])</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">cars.values</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">#would return an array (i.e. [""midrange"", ""high end"", ""low end""])</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">cars.has_key?(""Lambo"")&nbsp;</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">#would return false</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">cars.has_key?(""Toyota"")</div><div style=""font-family: arial; text-align: center;""><br></div><div style=""font-family: arial; text-align: center;"">#would return true</div>"
What is enumerable?	It is a module which is a collection of useful methods (including each and map).
What's the difference between .map and .each on the following array?<div><br></div><div>my_array = [1,2,3,4]</div><div><br></div><div>new_each_array = my_array.each { |value| value * value }</div><div>new_map_array = my_array.map { |value| value * value }</div>	Each is used for its side effect. In other words, nothing is returned in the example given above because nothing is specified. On the other hand, map is used to create a new array and return that array to the variable that is specified. Here are the answers:<div><br></div><div># new_each_array = [1,2,3,4]</div><div># new_map_array = [1,4,9,16]</div><div><br></div><div>*Of note is that the .collect method is the same as the .map method.</div>
"What is the inject method less commonly known as? What does it do to the following:<div><br></div><div>my_numbers = [1,2,3,4,5]</div><div><br></div><div>some_value = my_numbers.inject(0) do |accum, element|</div><div>&nbsp; &nbsp;accum + element</div><div>end</div><div><br></div><div>What does this do?</div><div><br></div><div><div>nums.inject(:+)</div><div><br></div><div>And this?</div><div><br></div><div>nums.inject("""")</div></div>"	It is less commonly known as reduce. It will take the initial argument (in this case 0) as the starting value and then it will go through each element in the array adding it to the initial argument. From there it takes the added sum as the initial argument, and adds in the next value.&nbsp;<div><br></div><div>The first shortcut does the same as the above code. The second sets the accum value to an empty string.</div>
How would you use the select method to find all of the array indices that are divisible by three? Use the following array:<div><br></div><div>one_to_twelve = [1,2,3,4,5,6,7,8,9,10,11,12]</div><div><br></div><div>Need to get an array that has [3,6,9,12]</div>	one_to_twelve.select do |num|<div>&nbsp; &nbsp;num % 3 == 0</div><div>end</div>
What do all the following methods do?<div><div><br></div><div>.all?</div><div>.any?</div><div>.none?</div><div>.count</div><div>.include?</div></div>	.all? , .any? , and .none? are used in conjunction with a block of code where the objects count if they pass some sort of test. For example:<div><br></div><div>one_to_four = [1,2,3,4]</div><div>one_to_four.all? do |i|</div><div>&nbsp; &nbsp;i < 5 &amp;&amp; i > 0</div><div>end</div><div><br></div><div>Here, the function would return true because all the indices passed the test. Count can be used on an object or an array and will count how many items are in the array or object. Include will tell you if something is included in the array.</div>
What would you say inspect does that to_s does not do?	"It will return some things differently. For example:<div><br></div><div>""my string"".to_s</div><div><br></div><div># returns ""my string""</div><div><br></div><div>""my string"".inspect</div><div><br></div><div># returns ' ""my string"" '</div><div><br></div><div>nil.to_s</div><div><br></div><div># returns """" or an empty string</div><div><br></div><div>nil.inspect</div><div><br></div><div>#returns ""nil""</div>"
What would you say inspect does that to_s does not do?	"It will return some things differently. For example:<div><br></div><div>""my string"".to_s</div><div><br></div><div># returns ""my string""</div><div><br></div><div>""my string"".inspect</div><div><br></div><div># returns ' ""my string"" '</div><div><br></div><div>nil.to_s</div><div><br></div><div># returns """" or an empty string</div><div><br></div><div>nil.inspect</div><div><br></div><div>#returns ""nil""</div>"
What is the difference between puts and p?	Puts uses the to_s method while p uses the inspect method.
What is Kernel?	It is a module in Ruby (a collection of methods that is mixed into the classes)
"Write this another way (hint: backwards more like English). Then write it in an even shorter way.<div><br></div><div>if [1,2,3].index(45) == nil</div><div>&nbsp; &nbsp;puts ""Sorry, that is not part of the array""</div><div>end</div>"	"puts ""Sorry, that is not part of the array"" if [1,2,3].index(45) == nil<div><br></div><div>puts ""Sorry, that is not part of the array"" if [1,2,3].index(45).nil?</div>"
List the two ways you would know if a given variable is an instance of a specific class:	"""string"".class<div><br></div><div>#would return String</div><div><br></div><div>""string"".is_a(Object)</div><div><br></div><div>#would return true</div>"
How would you use the each_with_index method?	[1,2,3,4,5].each_with_index do |value, index|<div>&nbsp; &nbsp;puts(value)</div><div>&nbsp; &nbsp;puts(index)</div><div>end</div>
"What would the following do?<div><br /></div><div>5.times do</div><div>&nbsp; &nbsp;puts ""Hello""</div><div>end</div>"	"It would say ""Hello"" 5 times."
What is the difference between an implicit and explicit return?	All functions have implicit returns. They are the last line of the function. If nothing explicitly says return this value, It will be the last line. However, if we want something to return before the last line, we have to use return.
How short are really good methods?	Really good methods are usually less than 10 lines of code.
What does the .scan method do? How would you use it?	The scan method loops through a string. You pass a regex parameter to scan and it will return an array of the matches (use /\w+/ to get strings that are words).
Convert this number to a character and then back to a number:<div><br></div><div>65</div>	"65.chr<div><br></div><div># produces ""A""</div><div><br></div><div>""A"".ord</div><div><br></div><div>#produces 65</div>"
Below are some common regex type patterns. Fill in the blank for what the regex would be:<div><br></div><div>Range Specification (say from a to z):</div><div>All Word Characters (a-z, A-Z, and 0-9):</div><div>Non Word Characters:</div><div>Space Characters( same an empty string, \t, \n, \r, \f):</div><div>Non Space Character:</div><div>Digit Character(same as 0-9):&nbsp;</div><div>Non Digit Character:</div><div>Zero Or More Repetitions Of The Proceeding:</div><div>One Or More Repetitions Of The Proceeding:</div><div>At Least M Repetitions And At Max N Repetitions Of The Proceeding:</div><div>At Least One Repetition Of The Proceeding:</div><div>Either Proceeding Or Next Expression May Match:</div><div><br></div>	Range Specification: [a-z]<div>All Word Characters: \w</div><div>Non Word Characters: \W</div><div>Space Characters: \s</div><div>Non Space Characters: \S</div><div>Digit Character: \d</div><div>Non Digit Character: \D</div><div>Zero Or More Repetitions Of The Proceeding: *</div><div>One Or More Repetitions Of The Proceeding: +</div><div>At Least M Repetitions And At Max N Repetitions Of The Proceeding: {m,n}</div><div>At Least One Repetition Of The Proceeding: ?</div><div>Either Proceeding Or Next Expression May Match: |</div>
"What would this method store in the variable?<div><br></div><div>the_answer = ""Chase"".chars</div>"	"the_answer = [""C"", ""h"", ""a"", ""s"", ""e""]"
What does to_a do?	It tries to convert the parameter into an array
How does the match method work on a basic level?	The match method tests whether or not there is a match (usually a regex) in a string. If there is, it returns the match (a truthy value). If not, it returns nil.
Create two variables on one line with Ruby:	"name, birthday = ""Chase"", ""6/19/92"""
How does the sort method work in Ruby? Should how you would include different parameters	sort uses comparison ( < , > , = ) to determine where something should go in the output array. To include additional variables, you would do the following:<div><br /></div><div>some_array.sort { | a , b | a <=> b}</div><div><br /></div><div>Changing a and b in the comparison portion (i.e b <=> a) will change the order of the array from greatest to smallest.</div><div><br /></div><div>** keep in mind that this uses quick sort and the way quick sort is set up, the order of the proc will determine whether the values are ascending or descending.</div>
How would you use delete, delete_at, and delete_if?	"<div>** of note is that these methods modify the actual array that is passed to them, returning the value that was deleted from the original array **</div><div><br></div>All these can be used on strings and arrays. Delete will delete something if it matches the parameter that you pass it. Delete_at will delete the passed in parameter at the passed in index. Delete if takes a block with a variable and then a test. You can see examples of each below:<div><br></div><div>one_through_four = [1,2,3,4]</div><div>one_through_four.delete(1) &nbsp; # => 1</div><div>p one_through_four &nbsp;# => [2,3,4]</div><div><br></div><div><div>one_through_four = [1,2,3,4]</div><div>one_through_four.delete(1) { ""so there was a one""} &nbsp; # => ""so there was a one""</div></div><div><br></div><div><div>one_through_four = [1,2,3,4]</div><div>one_through_four.delete_at(1) &nbsp; # => 2</div></div><div>p one_through_four # => [1,3,4]</div><div><br></div><div><div>one_through_four = [1,2,3,4]</div><div>one_through_four.delete_if {|number| number > 1 } &nbsp;# => [2,3,4]</div></div><div>p one_through_four # => [1]</div>"
What does to_f do?	It tries to turn the given parameter into a float (fraction in Ruby language)
How would you use the upto method in Ruby? Show an example:	Looping through an array<div><br></div><div>0.upto(arr.length - 1) do |index|</div><div>&nbsp; &nbsp;#your code block</div><div>end</div><div><br></div><div>It's the same as</div><div><br></div><div>idx = 0</div><div>while idx < arr.length - 1</div><div>&nbsp; &nbsp; #code block</div><div>&nbsp; &nbsp; idx += 1</div><div>end</div><div><br></div><div>It's just a little bit shorter</div><div><br></div><div>*Also you can do the same thing but backwards using .downto</div>
"I think the following problem has a solution worth memorizing and understanding for the future so here's the problem and the solution. Why are you starting at 2 for the .upto method? What's the purpose there?<div><br></div><div>#&nbsp;<span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">ArrayAdditionI(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">arr</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take the array of numbers stored in&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">arr</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and return the string&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">true</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;if any combination of numbers in the array can be added up to equal the&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">largest number</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;in the array, otherwise return the string&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">false</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">. For example: if&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">arr</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;contains [4, 6, 23, 10, 1, 3] the output should return&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">true</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;because 4 + 6 + 10 + 3 = 23. The array will not be empty, will not contain all the same elements, and may contain negative numbers.&nbsp;</span><br><div><br></div><div>def ArrayAddition(arr)</div><div>&nbsp; &nbsp;largest_number = arr.max</div><div>&nbsp; &nbsp;arr.delete(largest_number)</div><div><br></div><div>&nbsp; &nbsp;2.upto(arr.length) do |comb_length|</div><div>&nbsp; &nbsp; &nbsp; arr.combination(comb_length) { |comb| return true if comb.inject(:+) == largest_number }</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;false</div><div>end</div></div>"	So there are a couple of really clever things that are happening here. First, we're using 2.upto not because we're technically starting at the index 2 but because we know that it will take at least 2 numbers to get up to the largest_number, we're starting at the 2 and using all combinations up to and including all the remaining numbers in the array.<div><br></div><div>As well, it's really neat how we use comb.inject to quickly sum up all the values of the given combination to then check it against the largest_number. Overall, great problem and solution here.</div><div><br></div><div>Also, it's worth noting that we go up to arr.length and not arr.length - 1 because we want to have the option of using all the remaining numbers to add up to the greatest and not just 3 out of the 4 or 2 out of the 3.</div>
How would you set the default hash values for a hash that currently has no keys?	hash_map = Hash.new(0)<div><br></div><div>That will do the trick!</div>
"How would you find a value based on its key? How about a key based on its value? Let's use the following as a hash:<div><br></div><div>my_info = { ""name"" => ""Chase"", ""age"" => 19, ""location"" => ""Sandy""}</div>"	"my_info.key(""Chase"") #=>""name""<div>my_info[""name""] #=> ""Chase""</div>"
How would you find how many twos this array has in the quickest way possible?<div><br></div><div>nums_array = [2,3,4,5,2,1,3,2,4,5,6]</div>	nums_array.count(2) # => 3
What's the quickest way to turn the following number into an array of integers?<div><br></div><div>my_num = 123413451435</div>	my_num.to_s.chars.map(&amp;:to_i)
How does an until loop differ from a while loop?	"A while loop continues until the condition is false. For example:<br><br><div>while i < str.length</div><div>&nbsp; &nbsp;puts i</div><div>end</div><div><br></div><div>This will continue until the statement i < str.length is false. On the other hand, the until loop continues until the condition is true. For example:</div><div><br></div><div>until me[""status""] == ""married""</div><div>&nbsp; &nbsp;p ""Go on a date""</div><div>end</div><div><br></div><div>This will continue reminding me to go on dates until I am married.&nbsp;</div>"
What is the fastest way to combine a range of numbers multiplying?<div><br></div><div>nums = [1,2,3,4,5,6]</div>	nums.inject(:*) # => 21
"Here's another one of those problems that I think was solved in a clever way:<div><br></div><div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">OffLineMinimum(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">strArr</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take the&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">strArr</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;parameter being passed which will be an array of integers ranging from</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">1...n</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and the letter ""E"" and return the correct subset based on the following rules. The input will be in the following format: [""I"",""I"",""E"",""I"",...,""E"",...,""I""] where the I's stand for integers and the E means take out the smallest integer currently in the whole set. When finished, your program should return that new set with integers separated by commas. For example: if&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">strArr</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;is [""5"",""4"",""6"",""E"",""1"",""7"",""E"",""E"",""3"",""2""] then your program should return&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">4,1,5</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">.&nbsp;</span></div><div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;""><br></span></div><div>How would you go about solving this?<span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;""><br></span></div>"	"<div>def OffLineMinimum(strArr)</div><div>&nbsp; nums, result = [], []</div><div>&nbsp; strArr.each{ |char| char == ""E"" ? result << nums.sort!.shift : nums << char.to_i }</div><div>&nbsp; result.join(',')</div><div>end</div>"
<div>&nbsp;s1, f1, s2, f2, overlap, six = arr</div><div><br></div><div>In the event that arr = [5,12,45,67,92,1] what will each variable be?</div>	s1 = 5<div>f1 = 12</div><div>s2 = 45</div><div>f2 = 67</div><div>overlap = 92</div><div>six = 1</div><div><br></div><div>They correspond to indexes based on the order the variables are declared.</div>
"What's the fastest way to see if two arrays have overlapping values?<div><br></div><div>arr_1 = [""Chase"", ""John"", ""Armstrong""]</div><div>arr_2 = [""John"", ""David"", ""Armstrong""]</div>"	arr_3 = arr_1 &amp; arr_2
What is .abs in Ruby	It returns the absolute value of the number parameter passed to it.
What does .sort do when we're talking about a grid system? For example<div><br></div><div>my_arr = [ [2,3] , [4,8] , [2,8] , [4,3] ]</div>	It's going to go through each array and organize them first by the x value and then later by the y value. For example:<div><br></div><div>[ [2,3] , [2,8] , [4,3], [4,8] ]</div>
What must you use in conjunction with the following to get an array of all the possible combinations?<div><br></div><div>[1,2,3,4,5].combination(3)</div>	.to_a
This one was really tough for me so it is probably worth memorizing:<div><br></div><div>You want to sort an array of numbers to see if it can have a wave like pattern( [1,4,2,6,5,2,7]</div>	<div>def WaveSorting(arr)</div><div>&nbsp; arr.each{|num| return false if arr.count(num) > (arr.length / 2.0) }</div><div>&nbsp; true</div><div>end</div>
How would you round down in Ruby?	some_decimal.floor
What would a binary number be?&nbsp;	Binary is the 0 and 1 sequence where the first block represents ones and then the next twos and then the next fours...doubling like that until the last (farthest left) digit.&nbsp;
Wow, this is a really cool method to understand as well. I guess to_s can have a parameter. When you usually use to_s, it assumes the parameter is (10) as in base ten. If I wanted to convert something to binary, how would I do it? What else could you use this idea with?	I would say&nbsp;<div><br></div><div>num.to_s(2) #=> some combination of 1 and 0 i.e. 10010101001111</div><div><br></div><div>You could also use it when you want to convert an integer (i.e. to_i) in a certain way as well. For example:</div><div><br></div><div>binary_num.to_i(2).to_s</div>
For some reason doing num.to_s(2) will not completely convert the number correctly. What would you need to do to get the right number in binary?	You would need to add 0's to the front of the string until the string's length works out that string.length % 8 == 0. Not quite sure why but it is the case.
How would you increment in an .each loop without having to get to the end of the code block?	You just say next. For example<div><br></div><div>def find_greater_than_one(arr_of_nums)</div><div>&nbsp; &nbsp;count = 0</div><div>&nbsp; &nbsp;arr_of_nums.each do |num|</div><div>&nbsp; &nbsp; &nbsp; next if num < 2</div><div>&nbsp; &nbsp; &nbsp; count += 1</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;count</div><div>end</div>
How would you go about debugging Ruby code (according to Bowen)?	You would treat it like a science experiment, make an assumption about what is going wrong, and then test your assumption with p or puts statements.
How would you approach a problem that you have no idea how to solve(according to Bowen)?	Trial and error.
"How would you use the keep_if method in Ruby to separate the vowels into a new array? Use the following sentence. How would you say that keep_if and select are different?<div><br></div><div>my_sentence = ""hello everyone""</div>"	my_sentence.chars.keep_if{ |char| char.match(/[aeiou]/) }<div><br></div><div>It's important to note that this one only works on arrays...it can't be applied directly to the string (i.e. without using the .chars method)</div><div><br></div><div>The keep_if method is modifying the original array and only keeping value if they pass the test that is passed to the block. On the other hand, the select method is different because it is creating a new array. Of note is that both of these are used on arrays. For the most part, you'll use methods on arrays and not on strings (you can use each_char on strings).</div>
What would the following return? What would be the value of the variable?<div><br></div><div>my_nums = [1,2,3]</div><div>my_nums.slice(0)<br></div>	# => 1<div>my_nums #=> [2,3]</div>
What is each_index?	It is a method where the passed value is the index, not the value. For example:<div><br></div><div>[4,5,6].each_index do |i|</div><div>&nbsp; &nbsp;p i</div><div>end</div><div><br></div><div>That would write each index (i.e. 0,1,2 not 4,5,6)</div>
How would you iterate over a string without converting it to an array? What method would you use?	"def no_o(str)<div>&nbsp; &nbsp;str.each_char { |char| return false if char == ""o"" }</div><div>end</div>"
How would you make the following give you a legitimate decimal answer? What would you add to round the answer?<div><br></div><div>two = 2</div><div>three = 3</div>	decimal_two = two.to_f<div><br></div><div># => decimal_two = 2.0</div><div><br></div><div>decimal_three = three.to_f</div><div><br></div><div># => decimal_three = 3.0</div><div><br></div><div>big_number = decimal_two/decimal_three &nbsp; #=> 2.666666666666666</div><div><br></div><div>big_number.round(2) #=> 2.67 , rounded to two decimal places</div>
"<div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">FormattedDivision(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span>,<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take both parameters being passed, divide&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;by&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">, and return the result as a string with properly formatted commas and 4 significant digits after the decimal place. For example: if&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;is&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">123456789</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;is&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">10000</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;the output should be</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">""12,345.6789""</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">. The output must contain a number in the one's place even if it is a zero.&nbsp;</span><br></div><div><br></div><div>Hint: { }</div>"	"<div><div>def FormattedDivision(num1,num2)</div><div><br></div><div>&nbsp; divided = (num1.to_f / num2.to_f).round(4).to_s.split('.')</div><div><br></div><div>&nbsp; first = divided[0].reverse.scan(/.{1,3}/).join(',').reverse</div><div>&nbsp; second = divided[1]</div><div><br></div><div>&nbsp; second << ""0"" until second.length == 4&nbsp;</div><div>&nbsp;&nbsp;</div><div>&nbsp; first + ""."" + second</div><div>end</div><div><br></div><div>That solution is worth memorizing. Why do you do the .scan(/.{1,3}/) ?</div></div><div><br></div>It groups it into a new array where group is at least 1 digit long but can be up to three digits long."
"<div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">SwapII(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">str</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take the&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">str</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;parameter and swap the case of each character. Then, if a letter is between two numbers (without separation), switch the places of the two numbers. For example: if&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">str</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;is ""6Hello4 -8World, 7 yes3"" the output should be&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">4hELLO6 -8wORLD, 7 YES3</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">.&nbsp;</span></div><div><br></div><div>Here's another one worth memorizing. A couple of questions. Here are two hints for solving this one...use the gsub method with a regex match and then a block of code. Also, you'll use a method for changing the case.</div>"	<div>def SwapII(str)</div><div>&nbsp; str.swapcase.gsub(/\d[A-z]+\d/){|m| (m[0], m[1..-2], m[-1] = m[-1], m[1..-2], m[0]).join('')}</div><div>end</div><div><br></div><div>**Of note here is that the order of the m[0], m[1..-2] etc is important. When I tried going over this again and building it from scratch, I put in m[0], m[-1], m[1..-2] and it screwed up the result. I think the order you put it in is what is going to be returned and that's why the join method is important here.</div>
"<div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">TripleDouble(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span>,<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take both parameters being passed, and return&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">1</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;if there is a straight triple of a number at any place in&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and also a straight double of the same number in&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">. For example: if&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num1</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;equals&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">451999277</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num2</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;equals&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">41177722899</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">, then return&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">1</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">because in the first parameter you have the straight triple&nbsp;</span><i style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">999</i><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;and you have a straight double,&nbsp;</span><i style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">99</i><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">, of the same number in the second parameter. If this isn't the case, return&nbsp;</span><b style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">0</b><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">.&nbsp;</span><br></div><div><br></div><div>def TripleDouble(num1,num2)</div><div>&nbsp; &nbsp; numbers = (""0""..""9"").to_a</div><div>&nbsp; &nbsp; numbers.each { |num_s|</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p_triple = num1.to_s.scan(/#{num_s}{3}/)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p_double = num2.to_s.scan(/#{num_s}{2}/)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if p_triple != [] &amp;&amp; p_double != []</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; return 0</div><div>end</div><div>&nbsp; &nbsp;</div><div><br></div><div>What's different about the scan method that is used? What does the number afterward do?</div>"	This is unique because it uses string interpolation inside of a loop to change what we're looking for each time. The number after determines how many of those we need in a row.<div><br></div><div>**I learned something very unique doing this equation just now. As it turns out, {3} can't be used inside of double parenthesis. It's something that's particular to a regex which I imagine is signified by the double forward slash (/ &nbsp; &nbsp; /).</div>
How would you get rid of the first two numbers (1 and 2) in the following array using the minus symbol? Does that change the original array?<div><br></div><div>[1,2,3]</div>	[1,2,3] - [1,2] #=> [3]<div><br></div><div>No it does not.</div>
How could you get the scan method to look for positive and negative numbers?	Use -? before the \d so that it looks for a negative value one or zero times.
"Here's another solution worth memorizing. What do you expect the line num.to_s.scan(/((\d)\2*)/) to do? Why are you using a and b with the each method?<div><br></div><div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">Using the Ruby language, have the function&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(162, 24, 24);"">LookSaySequence(<span style=""margin: 0px; padding: 0px; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num</b></span>)</span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;take the&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;parameter being passed and return the next number in the sequence according to the following rule: to generate the next number in a sequence&nbsp;</span><i style=""margin: 0px; padding: 0px; color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">read off</i><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">&nbsp;the digits of the given number, counting the number of digits in groups of the same digit. For example, the sequence beginning with 1 would be: 1, 11, 21, 1211, ... The 11 comes from there being ""one 1"" before it and the 21 comes from there being ""two 1's"" before it. So your program should return the next number in the sequence given&nbsp;</span><span style=""margin: 0px; padding: 0px; font-size: 14px; font-family: &quot;Courier New&quot;; color: rgb(31, 92, 195);""><b style=""margin: 0px; padding: 0px;"">num</b></span><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;"">.&nbsp;</span><br></div><div><span style=""color: rgb(56, 56, 56); font-family: &quot;Avenir Next&quot;; font-size: 14px;""><br></span></div><div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">def LookSaySequence(num)</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; num = num.to_s.scan(/((\d)\2*)/)</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; num_s = """"</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; num.each do |a, b|</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; &nbsp; &nbsp; num_s += ""#{a.length}#{b}""</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; end</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">&nbsp; return num_s</span></font></div><div><font color=""#383838"" face=""Avenir Next""><span style=""font-size: 14px;"">end</span></font></div></div>"	The scan line with that regex pattern will divide the string into an array of arrays with two values in each array. The first value will show how many in a row there are. The second value will just show the value that is being used in a row.<div><br></div><div>You use each because it is going over the array and a and b represent the two indices in the array.</div>
"Another one of those solutions worth memorizing. Here you're looking to evaluate a string expression and return the correct value for x:<div><br></div><div><div>def MissingDigit(str)</div><div>&nbsp; 9.downto 0 do |digit|</div><div>&nbsp; &nbsp; equation = str.gsub(""="", ""=="").gsub(""x"", ""#{digit}"")</div><div>&nbsp; &nbsp; return digit if eval(equation)</div><div>&nbsp; end</div><div>end</div></div><div><br></div><div>What stands out to you here?</div>"	The fact that we're using the eval method to return whether or not something is true. As well, we're also using the gsub method twice to replace the = sign with a comparison equal sign and using string interpolation to put in a new digit each time.
What does the following do?<div><br></div><div>my_var = %(my name is chase)</div><div><br></div><div>What is the difference between that and&nbsp;</div><div><br></div><div>my_var = %w(my name is chase)</div><div><br></div>	"It is a shortcut for writing the following:<div><br></div><div>my_var = ""my name is chase""</div><div><br></div><div>The second is much more common produces the following</div><div><br></div><div>my_var = [""my"", ""name"", ""is"", ""chase""]</div><div><br></div><div><br></div>"
What would the following do?<div><br></div><div>[[1,2],[3,4]].transpose</div>	[[1,3],[2,4]]&nbsp;<div><br></div><div>Basically it changes it from a collection of rows in each array to a collection of columns in each array.</div>
"What does the rotate method do to the following?<div><br></div><div>[""a"",""b"",""c"",""d""].rotate!</div>"	"It's basically musical chairs. The new order would be [""b"",""c"",""d"",""a""]. If you wanted to rotate things more you could include a parameter such as rotate!(2) or rotate(-2). As you might have guessed, including a positive parameter makes the first become the last and does that two times. Conversely, -2 would make the last the first and do that two times."
What is the syntax for a case statement in Ruby?	"<div>case char</div><div>&nbsp; &nbsp;when char == ""A"" then #do something&nbsp;</div><div>&nbsp; &nbsp;when char == ""B"" then #do something</div><div>&nbsp; &nbsp;else # do something</div><div>&nbsp; &nbsp;# and so on and so on&nbsp;</div><div>end</div><div><br></div><div>You can also do</div><div>case char</div><div>&nbsp; &nbsp;when char == ""A""</div><div>&nbsp; &nbsp; &nbsp; #do something</div><div>&nbsp; &nbsp;when char == ""B""</div><div>&nbsp; &nbsp; &nbsp; #do something</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp; &nbsp; #do something</div><div>end</div><div><br></div><div>**Something really important to note here is that on the last one where you have the ""when"" and the action on different lines, else does not have corresponding end like you would expect it to. Normally we would expect their to be a corresponding end for else and for case but here there is not.</div>"
What would a $ do to a variable? For example:<div><br></div><div>$name</div>	It makes the variable a global variable so that it can be called anywhere in the problem. Let's say we have a function that we want to break down into smaller pieces but we need each piece to have access to and manipulate a piece that wasn't defined inside one of the smaller pieces. The example below isn't great but it at least illustrates what is happening:<div><br></div><div>=====Normal=====</div><div><br></div><div>def count_times(num)</div><div><br></div><div>&nbsp; &nbsp;times = 0</div><div>&nbsp; &nbsp;1.upto(num) do |add_me|</div><div>&nbsp; &nbsp; &nbsp; times += 1</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;times</div><div><br></div><div>end</div><div><br></div><div>=====Using Global Variable=====</div><div><br></div><div>def count_times(num)</div><div>&nbsp; &nbsp;$times = 0</div><div>&nbsp; &nbsp;add_times(num)</div><div>&nbsp; &nbsp;$times</div><div>end</div><div><br></div><div>def add_times(num)</div><div>&nbsp; &nbsp;1.upto(num) do |add_me|</div><div>&nbsp; &nbsp; &nbsp; $times += 1</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div>**Additional information here. It makes something a global variable if it is defined inside a method. To make something a global variable that is not defined inside of a method, you simply do the normal var = something outside of a method.</div>
What does the .index method do?	It tells you what index a certain parameter is at. For example, if you do:<div><br></div><div>[1,2,3].index(3)</div><div><br></div><div>You'll get the answer 2 because that's the index. In the following you would get:</div><div><br></div><div>[1,2,3].index(5)</div><div><br></div><div>You'll get the answer nil because the index doesn't exist for that value.</div>
This is a really cool combination that I saw on one of the problems today. What would you expect it to do?<div><br></div><div>1.upto(10).to_a<br></div>	It will return an array [1,2,3,4,5,6,7,8,9,10]
"What's the quickest way to capitalize each word in an array of words using map?<div><br></div><div>[""my"", ""name"", ""is""]</div>"	"[""my"", ""name"", ""is""].map(&amp;:capitalize) #=> [""My"", ""Name"", ""Is""]<br>"
"<pre class=""prettyprint notranslate tryit prettyprinted"" style='box-sizing: border-box; font-family: Menlo, Monaco, Consolas, ""Courier New"", monospace; padding: 5px; margin-top: 0px; margin-bottom: 10px; border-radius: 0px; width: 501.328px; line-height: 16px; border: 1px solid rgb(214, 214, 214); font-size: 13px; overflow: auto; min-height: 37px; color: rgb(49, 49, 49); cursor: default; background: url(""/ruby/images/try-it.jpg"") right top no-repeat rgb(238, 238, 238) !important;'><span class=""kwd"" style=""box-sizing: border-box;color: rgb(0, 0, 136)"">class</span><span class=""pln"" style=""box-sizing: border-box;""> </span><span class=""typ"" style=""box-sizing: border-box; color: rgb(127, 0, 85);"">Customer</span><span class=""pln"" style=""box-sizing: border-box;"">    </span><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">def</span><span class=""pln"" style=""box-sizing: border-box;""> initialize</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">(</span><span class=""pln"" style=""box-sizing: border-box;"">id</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">,</span><span class=""pln"" style=""box-sizing: border-box;""> name</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">,</span><span class=""pln"" style=""box-sizing: border-box;""> addr</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">)</span><span class=""pln"" style=""box-sizing: border-box;"">       </span><span class=""lit"" style=""box-sizing: border-box; color: rgb(0, 102, 102);"">@cust_id</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">=</span><span class=""pln"" style=""box-sizing: border-box;"">id       </span><span class=""lit"" style=""box-sizing: border-box; color: rgb(0, 102, 102);"">@cust_name</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">=</span><span class=""pln"" style=""box-sizing: border-box;"">name       </span><span class=""lit"" style=""box-sizing: border-box; color: rgb(0, 102, 102);"">@cust_addr</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">=</span><span class=""pln"" style=""box-sizing: border-box;"">addr    </span><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">end</span><span class=""pln"" style=""box-sizing: border-box;"">    </span><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">def</span><span class=""pln"" style=""box-sizing: border-box;""> display_details</span><span class=""pun"" style=""box-sizing: border-box; color: rgb(102, 102, 0);"">()</span><span class=""pln"" style=""box-sizing: border-box;"">       puts </span><span class=""str"" style=""box-sizing: border-box; color: rgb(0, 136, 0);"">""Customer id #@cust_id""</span><span class=""pln"" style=""box-sizing: border-box;"">       puts </span><span class=""str"" style=""box-sizing: border-box; color: rgb(0, 136, 0);"">""Customer name #@cust_name""</span><span class=""pln"" style=""box-sizing: border-box;"">       puts </span><span class=""str"" style=""box-sizing: border-box; color: rgb(0, 136, 0);"">""Customer address #@cust_addr""</span><span class=""pln"" style=""box-sizing: border-box;"">     </span><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">end</span><span class=""pln"" style=""box-sizing: border-box;""> </span><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">end</span></pre><pre class=""prettyprint notranslate tryit prettyprinted"" style='box-sizing: border-box; font-family: Menlo, Monaco, Consolas, ""Courier New"", monospace; padding: 5px; margin-top: 0px; margin-bottom: 10px; border-radius: 0px; width: 501.328px; line-height: 16px; border: 1px solid rgb(214, 214, 214); font-size: 13px; overflow: auto; min-height: 37px; color: rgb(49, 49, 49); cursor: default; background: url(""/ruby/images/try-it.jpg"") right top no-repeat rgb(238, 238, 238) !important;'><span class=""kwd"" style=""box-sizing: border-box; color: rgb(0, 0, 136);"">What does the @cust_id called? What does it do? What does the syntax, #@cust_id do?</span></pre>"	They're known as instance variables. They are variables that are created based on an instance.
What does the the minmax method do on the following array?<div><br></div><div>[1,4,8,3,4,-1].minmax</div>	It returns a new array with the following indices:<div><br></div><div>[-1, 8]</div>
What's the fastest way to tell if a number is prime?	<div>require 'prime'</div><div><br></div><div>First you have to require the prime module (see above). Then you have do:</div><div><br></div><div>num.prime? #=> returns true if the number is prime</div>
What does the .compact and .compact! methods do?	They remove nil elements from an array. For example:<div><br></div><div>[0,1,2,3,nil].compact #=> [0,1,2,3]</div>
How would you use the partition method? What does it do?<div><br></div><div>[1,2,6,4,6,7].partition(&amp;:even?)<br></div>	The partition method divides an array into an array of two arrays where the first array contains all the elements that passed the block of code and the second interior array contains the elements that didn't pass the block of code. For example:<div><br></div><div>[[2,6,4,6],[1,7]]</div>
What would the following block of code do?<div><br></div><div>[[3],[1],[2,5,6]].find(&amp;:one?)</div>	It will return the first array it finds that has a count of one. In this case it would return [3]
What does the .take method do? What can you pass to the take method(and the min method, first method, etc) and what will it do?	The take method will literally take, or return, the first n number of elements specified. For example:<div><br></div><div>[1,2,3].take(2) #=> [1,2]</div><div><br></div><div>You can also pass numbers to the min and first and some other methods to take the smallest two or the first two numbers:</div><div><br></div><div>[1,765,23,0].min(2) #=> [0,1]</div><div>[34,765,23,1].first(3) #=> [1,23,34]</div>
What's the fastest way to count the number of vowels in a given string?	"""some string"".count(""aeiou"")<div><br></div><div>What's cool about this is it will count everything that is included inside of count.</div>"
"<div>Here you want to turn the string ""I_want_more"" or ""i-want-More"" into ""iWantMore"" which is how the camelcase works for Javascript. What is $1 used for in the following solution?</div><div><br></div>def camel_case(str)<div>&nbsp; &nbsp;str.gsub(/[_-](.)/){""#{$1.upcase""}</div><div>end</div>"	Supposedly $1 is a global variable. It takes whatever is in the first parenthesis (in this case the character that is immediately following the - or the _) and capitalizes it.
Given a list of integers and a single sum value, return the first two values (parse from the left please) in order of appearance that add up to form the sum.<div><br></div><div>*Keep in mind that you can have a data set with up to 10,000,000 possible numbers so using arrays and combinations wouldn't be wise.</div><div><br></div><div>ints = [5,3,4,2,1]</div><div>s = 7</div><div>#should return [3,4] not [5,2]</div><div><br></div><div><div>def sum_pairs(ints, s)</div><div>&nbsp; seen = {}</div><div>&nbsp; ints.each do |int|</div><div>&nbsp; &nbsp; return [s - int, int] if seen[s - int]</div><div>&nbsp; &nbsp; seen[int] = true</div><div>&nbsp; end</div><div>&nbsp; nil</div><div>end</div></div><div><br></div><div>What does that solution do? What does it teach us?</div>	It's more efficient to store and access data in hashes than it is in arrays.
How can you save memory with your program? What does the following teach you?<div><br></div><div><div>def productFib(prod)</div><div>&nbsp; a, b = [0, 1]</div><div>&nbsp; while prod > a * b</div><div>&nbsp; &nbsp; a, b = [b, a + b]</div><div>&nbsp; end</div><div>&nbsp; [a, b, prod == a * b]</div><div>end</div></div>	Don't hold onto old data if you don't need it anymore. Instead, overwrite the variable that isn't needed.
"What's so unique about the map method that is used below?<div><br></div><div><div>&nbsp; selection.map! do |selection|&nbsp;</div><div>&nbsp; &nbsp; if s1.count(selection) > s2.count(selection)</div><div>&nbsp; &nbsp; &nbsp; ""1:#{selection * s1.count(selection)}""</div><div>&nbsp; &nbsp; elsif s1.count(selection) < s2.count(selection)</div><div>&nbsp; &nbsp; &nbsp; ""2:#{selection * s2.count(selection)}""</div><div>&nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; ""=:#{selection * s1.count(selection)}""</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div></div>"	It is not used in the regular .map{...} for but is extended out to allow for additional code complexity while still using clean syntax.
"What does the sort_by method do here? How would you use it?<div><br></div><div><div>def mix(s1, s2)</div><div>&nbsp; selection = ('a'..'z').to_a.select { |letter| s1.count(letter) > 1 || s2.count(letter) > 1 }</div><div>&nbsp; selection.map! do |selection|&nbsp;</div><div>&nbsp; &nbsp; if s1.count(selection) > s2.count(selection)</div><div>&nbsp; &nbsp; &nbsp; ""1:#{selection * s1.count(selection)}""</div><div>&nbsp; &nbsp; elsif s1.count(selection) < s2.count(selection)</div><div>&nbsp; &nbsp; &nbsp; ""2:#{selection * s2.count(selection)}""</div><div>&nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; ""=:#{selection * s1.count(selection)}""</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div><div>&nbsp; selection.sort_by { |x| [-x.size, x[0], x[-1]] }.join(""/"")</div><div>end</div></div>"	It passes in each elements and then begins sorting it like an array (think x,y pairs) and then uses the sort method on each element. Here this sorts the answer first from longest, but if two strings are the same length, it will then move on to sorting by letter.
"Let's assume you know that they for sure use either an ""a"" or a ""s"" for their first character, a ""d"" or ""w"" for their second character, and a ""t"" or a ""u"" for their last character?<div><br></div><div>Also, instead of actually inputing the values, you have to assume more values can be added to the following array.</div><div><br></div><div>combinations = [ [""a"",""s""] , [""d"",""w""] , [""t"", ""u""] ] #remember, they program could randomly add in [""3"",""6""] to the end or any other random number of combinations. Return all the possible combinations.&nbsp;</div>"	"combinations[0].product(*combinations[1..-1]).map{|comb| comb.join("""")}<div><br></div><div>We use the * symbol because it signifies to the product method that we have multiple arguments and converts it nicely.</div>"
"This is another one of those problems worth memorizing. Explain what is happening here and why we are doing what we're doing:<div><br></div><div><div>def longest_slide_down(pyramid)</div><div>&nbsp; longest_slide_down!(pyramid.dup)</div><div>end</div><div><br></div><div>def longest_slide_down!(pyramid)</div><div>&nbsp; until pyramid.count == 1</div><div>&nbsp; &nbsp; bottom_row = pyramid.pop</div><div>&nbsp; &nbsp; p ""bottom row is "" + bottom_row.to_s</div><div>&nbsp; &nbsp; pyramid.last.map!.with_index {|x, i| x + bottom_row[i, 2].max}</div><div>&nbsp; end</div><div>&nbsp; pyramid.pop.pop</div><div>end</div></div><div><br></div><div>#The goal here is the find the longest slide on a pyramid. For example if pyramid is [[2],[2,4],[5,6,7]] The longest slide would be 2 -> 4 -> 7. However, they also have pyramids that are very large so doing something like product wouldn't be a good idea here.</div>"	
How would you map with index?	.each_with_index.map {|n, i| #some code }<div><br></div><div>or map!.with_index {|n, i| #some code }</div>
What does the ** operator do in Ruby? What do you call it?	It raises one number to the power of the other number. It's called exponentiation. For example:<div><br></div><div>6 ** 2 #=> 36</div>
What's the difference between print and puts?	"Print won't move things after it to the next line. For example:<div><br></div><div>puts ""Hi""</div><div>puts ""Why""</div><div><br></div><div>#</div><div>Hi</div><div>Why""</div><div><br></div><div>print ""Hi""</div><div>puts ""Why""</div><div>print ""Hi""</div><div><br></div><div>#</div><div>HiWhy</div><div>Hi</div>"
How would you comment out multiple lines of Ruby code without having to put # at the start of each line? What are the special caveats of this particular syntax?	You would start if with =begin and end it with =end . Of note is that there can't be any spaces between the equal sign and the word begin or the word end. As well, =begin and =end must be on their own lines like is shown below:<div><br></div><div>=begin</div><div><br></div><div>none of this</div><div>will be interpreted</div><div>by the interpreter</div><div><br></div><div>=end</div><div><br></div><div>*One thing I just learned is you can't have any spaces after begin or end either. They need a line entirely to themselves and spaces, at least on Codecademy, screwed it up.</div>
What's a good way to think of the unless control flow operator?	if it's not true == unless
"It would appear that you can identify a string within a method in two ways. For example, if we're trying to use the split statement we could say split("""") or we could say _______. What is the other way?<div><br></div><div><br></div>"	"""abc"".scan(/a/)<div><br></div><div>The other way would be using the // symbols as shown above.</div><div><br></div><div>**It's important to note that this doesn't work in every method for some reason. For example, if we try to do the following with the count method, it won't work:</div><div><br></div><div>""aeiouaeiou"".count(/aeiou/) #=> outputs an error</div>"
What's the syntax for a for loop in Ruby?	for num in 1..10<div>&nbsp; &nbsp;p num<br><div>end</div></div>
What's the syntax for a simple loop (i.e. using word loop)	i = 0<div>loop do</div><div>&nbsp; &nbsp;i+= 1</div><div>&nbsp; &nbsp;p i</div><div>&nbsp; &nbsp;break if i > 5</div><div>end</div>
"What does the * symbol signify to ruby in the following?<div><br></div><div><div>def what_up(greeting, *bros)</div><div>&nbsp; bros.each { |bro| puts ""#{greeting}, #{bro}!"" }</div><div>end</div></div>"	"<div>It's called a splat arguments. Basically, you're telling Ruby ""Just so you know, I don't know how many arguments are going to be passed in for this one"". This allows you to put in additional arguments like as follows:</div><div><br></div>what_up(""What up"", ""Justin"", ""Ben"", ""Kevin Sorbo"")<div><br></div><div>**Another way to think of it is you're telling Ruby to group all the following arguments as if they are part of an array like [""Justin"", ""Ben"", ""Kevin Sorbo""]</div>"
What does the <=> symbol do? What is it called?	"It's called the operand symbol. It will compare two objects. For example:<div><br /></div><div>book_1 = ""My book""</div><div><br /></div><div>book_2= ""Your Book""</div><div><br /></div><div>It will return 1 if the value on the left is greater than the value on the right:</div><div><br /></div><div>book_2 <=> book_1 #=> 1 because M comes before Y</div><div><br /></div><div>It will return -1 if the vale on the right is greater than the value on the left:</div><div><br /></div><div>book_1 <=> book #=> -1 because M comes before Y</div><div><br /></div><div>10 <=> 10 #=> 0 because the values are equal</div>"
"Do Rubyists like the following syntax? How would they like it?<div><br></div><div>about_me = { ""name"" => ""Chase"", ""age"" => 24 }</div>"	"They would prefer it like this:<div><br></div><div>about_me = {:name => ""Chase"", :age => 24}</div>"
What does the .intern method do? What method is it the same as?	"It is the same as the .to_sym method. It converts a string into a symbol:<div><br></div><div>""chase"".intern #=> :chase</div>"
What's the new syntax for Ruby hashes? What's changed?	"The old syntax:<div><br></div><div>my_info = { :name => ""Chase"", :age => 24 }</div><div><br></div><div>The new syntax:</div><div><br></div><div>my_info = {name: ""Chase"", age: 24 }</div><div><br></div><div>The keys are still symbols and you would access the name value by doing:</div><div><br></div><div>my_info[:name] #=> ""Chase""</div>"
How can you iterate over just keys in a hash? How about over just values?	hash.each_key {|k| #some code }<div>hash.each_value {|v| #some code }</div>
What does the ||= do	"It sets a variable to the value if it's currently not assigned or is false. For example:<div><br></div><div>book_name = nil</div><div><br></div><div>book_name ||= ""Jungle Book""</div><div>p book_name #=> prints ""Jungle Book""</div><div><br></div><div>book_name ||= ""Land Before Time""</div><div>p book_name #=> prints ""Jungle Book"" because it's already assigned.</div>"
What would the .respond_to? method do?	It will take the method that is passed to it and return true if the object that it is passed on will respond to the method that is passed. For example:<div><br></div><div>arr = [1,2,3,4,5]</div><div>arr.respond_to?(:each)</div>
What is an optional part of the following syntax?<div><br /></div><div>3.times do |i|</div><div>&nbsp; &nbsp;p i</div><div>end</div>	"We could potentially get rid of the i if we changed the code in the middle.<div><br></div><div>3.times do</div><div>&nbsp; &nbsp;p ""Did it""</div><div>end</div>"
"Where do you expect the following block of code to be displayed on the console?<div><br></div><div><div>def block_test</div><div>&nbsp; puts ""We're in the method!""</div><div>&nbsp; puts ""Yielding to the block...""</div><div>&nbsp; yield</div><div>&nbsp; puts ""We're back in the method!""</div><div>end</div></div><div><br></div><div>block_test { puts "">>> We're in the block!"" }<br></div>"	The block that is passed to it will happen wherever we put yield<div><br></div><div>** It's important to note that this is not a parameter but rather a block. Yield will accept a block which is enclosed by {}</div>
"This is something you should probably memorize:<div><br></div><div><div>def yield_name(name)</div><div>&nbsp; puts ""In the method! Let's yield.""</div><div>&nbsp; puts ""In between the yields!""</div><div>&nbsp; yield(name)</div><div>&nbsp; puts ""Block complete! Back in the method.""</div><div>end</div><div><br></div><div>What does yield do? Show how you would use it with a parameter (i.e. call the function)</div><div><br></div><div><br></div></div><div><br></div>"	"Yield pauses to evaluate the block of code that is passed into the method. In our case, because we used yield(name) it will take the parameter that was passed to the method (in this case ""Chase"") and do the block of code with that as the parameter.<div><br></div><div><div><div>yield_name(""Eric"") { |n| puts ""My name is #{n}."" }</div><div><br></div><div># Now call the method with your name!</div><div><br></div><div>yield_name(""Chase"") {|n| puts ""My name is #{n}.""}</div></div></div><div><br></div>"
How would you save block of code? For example, how would you save the n % 2 == 0 bit of code:<div><br></div><div>[1,2,3,4,5,6].select {|n| n % 2 == 0 }</div>	Well you can't save blocks of code in variables unless you save them in Procs. You would do it like this:<div><br></div><div><div>is_even = Proc.new do |n|</div><div>&nbsp; n % 2 == 0</div><div>end</div></div><div><br></div><div>Then you would be able to use it:</div><div><br></div><div>[1,2,3,4,5,6].select(&amp;is_even) #=>[2,4,6]</div><div><br></div><div>You could also do it like this:</div><div><br></div><div>is_even = Proc.new {|n| n % 2 == 0 }</div>
What does the &amp; signify when we're passing it plus a Proc into a method?	It is used to convert the Proc into a usable block.
"What do you use to call a Proc?<div><br></div><div>print_two = Proc.new { print ""2"" }</div>"	print_two.call
What's a faster way to write the following?<div><br></div><div>over_five = Proc.new {|n| n >= 5 }</div>	over_five = lambda {|n| n >= 5 }<div><br></div><div>**This is not completely true because Procs and lambdas aren't the exact same, even though they are both part of the Proc class.</div>
"<div>def batman_ironman_proc</div><div>&nbsp; victor = Proc.new { return ""Batman will win!"" }</div><div>&nbsp; victor.call</div><div>&nbsp; ""Iron Man will win!""</div><div>end</div><div><br></div><div>puts batman_ironman_proc</div><div><br></div><div>def batman_ironman_lambda</div><div>&nbsp; victor = lambda { return ""Batman will win!"" }</div><div>&nbsp; victor.call</div><div>&nbsp; ""Iron Man will win!""</div><div>end</div><div><br></div><div>puts batman_ironman_lambda</div><div><br></div><div>What are the two biggest differences with Proc.new and lambda? What does each puts statement return?</div>"	"First, lambda cares how many arguments you pass it while Proc does not. lambda will return an error if there is a wrong number of arguments while Proc will ignore unexpected arguments and assign nil to any that are missing.<div><br></div><div>As well, Proc executes its code immediately and returns it while lambda returns control to the calling function. In the case of the above code snippets, the first puts statement will be ""Batman will win!"" because the code executed immediately from the Proc when it was called. On the other hand, the lambda gave control to the calling function and that is why ""Iron Man will win!"" was returned.</div>"
How would you create a class with the name:<div><br></div><div>email customers&nbsp;</div>	EmailCustomers<div><br></div><div>*For classes we use camel case and not the lowercase and underscores</div>
What method goes at the beginning of every class?	def initialize(param1, param2)<div>&nbsp; &nbsp;@param1 = param1</div><div>&nbsp; &nbsp;@param2 = param2<br><div><div>end</div></div></div>
"Why won't the following work? How would you make it work?<div><br></div><div>def say_something</div><div>&nbsp; &nbsp;$word = ""word""</div><div>end</div><div><br></div><div>p word</div>"	"It won't work because the actual variable is $word and not word. Here's the fix:<div><br></div><div>def say_something</div><div>&nbsp; &nbsp;$word = ""word""</div><div>end</div><div><br></div><div>p $word</div>"
What is the double @@ used for? Explain how you would use it?	It is a variable that is shared by all instances of a particular class.
"How would you create a class that inherits from another class? For example, let's say we have the class Customer as follows:<div><br></div><div>class Customer</div><div>&nbsp; &nbsp;def product_confirmation(order)</div><div>&nbsp; &nbsp; &nbsp; p ""Awesome you ordered #{order}!""</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div>How would I get the class RetailCustomer to inherit from customer?</div>"	class RetailCustomer < Customer<div>end</div>
"How would you override a certain method from an inherited class? For example:<div><br></div><div>class Message</div><div>&nbsp; &nbsp;def sent_confirmation</div><div>&nbsp; &nbsp; &nbsp; p ""Sent!""</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div>class Text < Message</div><div>end</div>"	"You'd simply add the same method name to the Text class and it would overwrite it for that class.<div><br></div><div>class Text < Message</div><div>&nbsp; &nbsp;def sent_confirmation</div><div>&nbsp; &nbsp; &nbsp; p ""Sent from text.""</div><div>&nbsp; &nbsp;end</div><div>end</div>"
What does the word super do?	It is used if you overwrite a method that you realize you actually need.The syntax would be as follows inside the subclass:<div><br></div><div>def name_of_method_already_used_exactly_as_is</div><div>&nbsp; &nbsp;super(optional_arg)</div><div>end</div><div><br></div><div>Or if there is no arguments in the super class it would simply be</div><div><br></div><div>def name_of_method_already_used_exactly_as_is</div><div>&nbsp; &nbsp;super</div><div>end</div>
How many superclasses can a subclass have?	Only one. Ruby won't allow multiple superclasses.
How can you write the following code on one line?<div><br></div><div>class Dragon < MysticalCreature</div><div>end</div>	class Dragon < MysticalCreature; end
How would you make it so you can both change and access an instance variable's attributes? There's three ways here:<div><br></div><div>1. access the variable</div><div>2. change it</div><div>3. access it and change it</div>	"You use either attr_reader, attr_writer, or attr_accessor followed by a symbol as follows:<div><br></div><div>class Customer</div><div>&nbsp; &nbsp;attr_reader :username #would allow me to see the value</div><div>&nbsp; &nbsp;attr_writer :username #would allow me to reset the value to what I specify</div><div>&nbsp; &nbsp;attr_accessor :username #would replace the need for attr_reader and attr_writer</div><div>&nbsp; &nbsp;def initialize(username, password)</div><div>&nbsp; &nbsp; &nbsp; @username = username</div><div>&nbsp; &nbsp; &nbsp; @password = password</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div>user_one = Customer.new(""chasejarms"", ""somecrazypassword"")</div><div><br></div><div>user_one.username #=> ""chasejarms"", possible because of attr_reader</div><div>user_one.username = ""chasejarms1"" &nbsp;# possible because of attr_writer</div><div><br></div><div>user_one.username #""chasejarms1"" because we reset it</div><div><br></div><div>**Also, a faster way to do this would be to say</div><div><br></div><div>attr_accessor :name, :age&nbsp;</div><div><br></div><div>You could list as many as you want to so you wouldn't have to do them on different lines.</div>"
What is a module? What is the syntax? How would you include a constant in a module? How is a constant different from a variable?	A module is a collection of useful methods. The syntax for it is as follows:<div><br></div><div>module SomeName</div><div>&nbsp; &nbsp;#constants and methods inside here</div><div><br></div><div>end</div><div><br></div><div>To add a constant, you simply include something in all caps like this:</div><div><br></div><div>module Circle<br></div><div>&nbsp; &nbsp;PI = 3.14</div><div>end</div><div><br></div><div>The name pretty much gives it away here because constants are constant. They will not change. Variables on the other hand are variable and can change.</div>
Let's say you have two variables stored in different modules like:<div><br></div><div>module SimpleMath</div><div>&nbsp; &nbsp;PI = 3.14</div><div>end</div><div><br></div><div>module ComplexMath</div><div>&nbsp; &nbsp;PI = 3.1415</div><div>end</div><div><br></div><div>How would you access the correct PI? What do you call it?</div>	With double colons:<div><br></div><div>SimpleMath::PI #=> 3.14</div><div>ComplexMath::PI #=> 3.1415</div><div><br></div><div>It's called the Scope Resolution Operator</div>
To save space, modules aren't always present. How would you include a module so that you can use it?	require 'module'
How would you add a module into a class? What do you call it?	<div>Using the Math module as an example:</div><div><br></div>class ClassName<div>&nbsp; &nbsp;include Math<br><div><div>end</div></div></div><div><br></div><div>It's called a mixin</div>
"While the include method allows the instance itself to use a particular method defined in a module, what would you do to allow the class to use a particular method? For instance:<div><br></div><div>module Run</div><div>&nbsp; &nbsp;def run_right_now</div><div>&nbsp; &nbsp; &nbsp; p ""Run!""</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div>class WhenToRun</div><div>end</div><div><br></div><div>When_To_Run.run_right_now #=> ""Run!""</div>"	You would use the keyword extend. For example:<div><br></div><div>class WhenToRun</div><div>&nbsp; &nbsp;extend Run</div><div>end</div><div><br></div><div>** This is actually way cooler than it seemed at the time. Basically, a module is a collection of useful methods. When we extend a module to a class, what we're basically doing is allowing us to call those methods from the class itself instead of an instance. With the above example, we could do:</div><div><br></div><div>WhenToRun.run_right_now</div><div><br></div><div>however, we couldn't do:</div><div><br></div><div>run = WhenToRun</div><div>run.run_right_now</div><div><br></div><div>If we wanted the same functionality but with an instance of the object instead, we'd have to do:</div><div><br></div><div>class WhenToRun</div><div>&nbsp; &nbsp;include Run</div><div>end</div>
What would the balance=100 do in the following code?<div><br></div><div>class Account</div><div>&nbsp; &nbsp;def initialize(name, balance=100)</div><div>&nbsp; &nbsp; &nbsp; @name = name</div><div>&nbsp; &nbsp; &nbsp; @balance = balance</div><div>&nbsp; &nbsp;end</div><div>end</div>	It is signifying an optional parameter. If balance is provided, the instance variables balance will be equal to the provided balance. If it's not provided, the instance variables balance will be set equal to 100.
What will Ruby interpret the following number as? Why is it used that way?<div><br></div><div>my_num = 1_000_000</div>	It interprets it as 1000000 as is used because it's easier to read large numbers.
How would you do an either or situation in a regex?	[#*&amp;^*()]<div><br></div><div>That would mean that it could match with any of the things inside the parenthesis.</div>
What will the .prime_division method do? What does it work on? How would you get it to load in your program?	.prime_division is a part of the mathn module. You need to do:<div><br></div><div>require 'mathn' before you use the .prime_division method. The way the .prime_division method works is it continues to divide a number by the lowest prime as many times as it can until nothing is left. For example, with the number 60 we can divide by 2 (30), divide by 2 again (15), divide by 3 (5), and then divide by 5 (1). The prime_division returns this as follows:</div><div><br></div><div>60.prime_division #=> [ [2,2] , [3,1] , [5,1] ]</div><div><br></div>
What does the _ do?<div><br></div><div><div>&nbsp; &nbsp; n.abs.prime_division.each do |p,_|</div><div>&nbsp; &nbsp; &nbsp; factors[p] += n</div><div>&nbsp; &nbsp; end</div></div>	I imagine it doesn't do anything but it's there to show that we're not using that second value. We only really need the first value in this case.
"What will the sort method do to the following hash?<div><br></div><div><span style=""color: rgb(68, 170, 17); font-family: monospace; font-size: 14px; white-space: pre-wrap; background-color: rgb(14, 22, 40);"">{3=>135, 5=>90, 7=>21, 2=>54}</span><br></div>"	It will change it to an array of arrays as follows:<div><br></div><div>[ [2,54], [3,135], [5, 90], [7,21] ]</div>
Let's say you have the following hash that helps you in converting values from Roman Numerals to numbers. How would you create the exact opposite of that hash to help in going the other way? What method would you use?<div><br></div><div><div>&nbsp; from_roman = {</div><div>&nbsp; &nbsp; 'M' &nbsp;=> 1000,</div><div>&nbsp; &nbsp; 'CM' => 900,</div><div>&nbsp; &nbsp; 'D' &nbsp;=> 500,</div><div>&nbsp; &nbsp; 'C' &nbsp;=> 100,</div><div>&nbsp; &nbsp; 'CD' => 400,</div><div>&nbsp; &nbsp; 'XC' => 90,</div><div>&nbsp; &nbsp; 'L' &nbsp;=> 50,</div><div>&nbsp; &nbsp; 'XL' => 40,</div><div>&nbsp; &nbsp; 'X' &nbsp;=> 10,</div><div>&nbsp; &nbsp; 'IX' => 9,</div><div>&nbsp; &nbsp; 'V' &nbsp;=> 5,</div><div>&nbsp; &nbsp; 'IV' => 4,</div><div>&nbsp; &nbsp; 'I' &nbsp;=> 1</div><div>&nbsp; }</div></div>	to_roman = from_roman.inverse
What does the find method do? What other method is like this?	"It finds the first elements for which the chosen block is not false. For example:<div><br></div><div>[1,2,3,4,5,6,7,8,9,10].find {|n| n % 2 == 0 } #=> return 2 because it's the first instance</div><div><br></div><div>The .detect method does the same thing. Also of note is that you can include an optional parameter in find to say what should be said if there is no element that passes the block. For example:</div><div><br></div><div>[1,2,3,4,5,6].find(""Crazy"") {|n| n % 7 == 0 } #=> returns ""Crazy"" . Will return nil if nothing is passed to the optional block.</div>"
Can Ruby run on your processor? What does it run through? What are the two ways to execute Ruby code? What's the benefit?	"<p style=""margin: 0px 0px 1.5em; padding: 0px; border: 0px; font-family: 'PT Serif', Georgia, 'Helvetica Neue', Arial, sans-serif; line-height: inherit; font-size: 18px; vertical-align: baseline; color: rgb(34, 34, 34); background-color: rgb(248, 248, 248);"">Ruby is an ""interpreted"" programming language which means it can’t run on your processor directly, it has to be fed into a middleman called the ""virtual machine"" or VM. The VM takes in Ruby code on one side and speaks natively to the operating system and processor on the other. The benefit to this approach is that you can write Ruby code once and, typically, execute it on many different operating systems and hardware platforms.</p><p style=""margin: 0px 0px 1.5em; padding: 0px; border: 0px; font-family: 'PT Serif', Georgia, 'Helvetica Neue', Arial, sans-serif; line-height: inherit; font-size: 18px; vertical-align: baseline; color: rgb(34, 34, 34); background-color: rgb(248, 248, 248);"">A Ruby program can’t run on it’s own, you need to load the VM. There are two ways to execute Ruby with the VM: through IRB and through the command line.</p>"
What is the terminal? How do you open it on your Mac?	"The terminal is the textual interface for your computer. You open it by hitting command-spacebar and typing ""terminal"" then hitting enter."
What is XCode? How do you install it?	"Xcode is a suite of development tools published by Apple.&nbsp;<div><br></div><div><ol style=""margin: 0px 0px 1.5em 1.3em; padding: 0px; border: 0px; font-family: 'PT Serif', Georgia, 'Helvetica Neue', Arial, sans-serif; line-height: inherit; font-size: 18.399999618530273px; vertical-align: baseline; list-style-position: initial; list-style-image: initial; color: rgb(34, 34, 34); background-color: rgb(248, 248, 248);""><li style=""margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; line-height: inherit; vertical-align: baseline;"">Install XCode from the Apple App Store</li><li style=""margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; line-height: inherit; vertical-align: baseline;"">Open the application after installing and agree to the SLA terms</li><li style=""margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; line-height: inherit; vertical-align: baseline;"">Open&nbsp;<code style=""margin: -1px 0px; padding: 0px 0.3em; border: 1px solid rgb(221, 221, 221); font-family: Menlo, Monaco, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-style: inherit; font-variant-caps: inherit; line-height: 1.5em; font-size: 0.8em; vertical-align: baseline; display: inline-block; background-color: rgb(255, 255, 255); color: rgb(85, 85, 85); border-top-left-radius: 0.4em; border-top-right-radius: 0.4em; border-bottom-right-radius: 0.4em; border-bottom-left-radius: 0.4em;"">terminal</code>&nbsp;and run&nbsp;<code style=""margin: -1px 0px; padding: 0px 0.3em; border: 1px solid rgb(221, 221, 221); font-family: Menlo, Monaco, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-style: inherit; font-variant-caps: inherit; line-height: 1.5em; font-size: 0.8em; vertical-align: baseline; display: inline-block; background-color: rgb(255, 255, 255); color: rgb(85, 85, 85); border-top-left-radius: 0.4em; border-top-right-radius: 0.4em; border-bottom-right-radius: 0.4em; border-bottom-left-radius: 0.4em;"">xcode-select --install</code>, enter your user password</li></ol></div>"
What does the following do in the terminal?<div><br></div><div>ruby my_program.rb</div>	It first loads the ruby virtual machine. The virtual machine then loads and interprets the ruby file (in this case my_program.rb)
What is the IRB? What does it stand for? Why do you use it?<div><br></div><div>How do you use it?</div>	The IRB stands for Interactive Ruby Shell. It is a REPL (Read, Evaluate, Print, Loop). It evaluates a piece of code one line at a time and can be used for debugging or to remember how a certain method works.<div><br></div><div>You use it by opening the terminal and typing:</div><div><br></div><div>irb</div>
Why is Ruby evaluated from left to right?	Trick question. It's actually evaluated from right to left. For example:<div><br></div><div>b = 5 + 10</div><div><br></div><div>The 5 + 10 is first evaluated and the result is then passed to the variable b.</div>
What's wrong with the following two variable names?<div><br></div><div>students_array</div><div>sts</div>	You shouldn't include the data type in the variable name (common ruby preference). As well, you shouldn't have abbreviations (it's more difficult to read like English which is Ruby's goal)<div><br></div><div>**Quick note here. I've seen more and more that Ruby developers actually use the data type in their variable names to make it easy to keep track of conversions. I would agree that it is easier that way and so I don't think there is anything wrong with using students_array.</div>
What does the .sub method do that the .gsub method does not?	the sub method only replaces the first instance of a match. The sub method replaces all instances of the match.
"What has more methods?<div><br></div><div>:hello&nbsp;</div><div>""hello""</div><div><br></div><div>How can you find out?</div>"	"Strings have more methods than symbols. You can find out how many methods something has by using the methods method (shows all the methods in an array) followed by the count method. For example:<div><br></div><div>""hello"".methods.count #=> 168</div>"
What's a good way to know whether or not a ruby method will end with a question mark. For example:<div><br></div><div>[1,2,3,4,5].include?(5)</div>	If the method will return true or false, it usually ends in a question mark.
How can you open an additional tab in the terminal?	command-t
How would you figure out where you're currently at?	type in:<div><br></div><div>pwd</div><div><br></div><div>in the terminal</div>
What do you call the $ in the terminal?	It's called the shell prompt. It means the computer is ready to accept a command.
What is a directory?	A directory is a folder. Basically the terminal is just a way of accessing the things on your computer. Instead of seeing the folders and clicking on them, we use different text commands to access the folders.
What's the difference in output between:<div><br></div><div>ls -a</div><div>ls -lA</div>	They both show hidden files (files that start with .) but the ls -a shows a format that more closely matches the ls format.
What's the difference in output between:<div><br></div><div>ls -a</div><div>ls -lA</div>	They both show hidden files (files that start with .) but the ls -a shows a format that more closely matches the ls format.
What do the following commands do?<div><br></div><div>ls -a</div><div>ls -t</div><div>ls -l</div>	ls -a&nbsp;<div><br></div><div>Shows hidden files and non-hidden files in the same format as ls.</div><div><br></div><div>ls -t</div><div><br></div><div>Shows orders files and directories by the time they were last modified.</div><div><br></div><div>ls -l</div><div><br></div><div>Shows files in long format.</div>
"The long format in the terminal has seven columns. What do each one of these columns represent? I've included an example below so you can deduce the answer:<div><br></div><div><p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 3 chasearmstrong&nbsp; staff &nbsp; 102 Oct 18 21:36 Desktop</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 4 chasearmstrong&nbsp; staff &nbsp; 136 Oct 19 12:56 Documents</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 5 chasearmstrong&nbsp; staff &nbsp; 170 Oct 19 11:55 Downloads</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------@ 48 chasearmstrong&nbsp; staff&nbsp; 1632 Oct 19 14:51 Library</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 3 chasearmstrong&nbsp; staff &nbsp; 102 Oct 18 21:36 Movies</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 3 chasearmstrong&nbsp; staff &nbsp; 102 Oct 18 21:36 Music</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwx------+&nbsp; 3 chasearmstrong&nbsp; staff &nbsp; 102 Oct 18 21:36 Pictures</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">drwxr-xr-x+&nbsp; 5 chasearmstrong&nbsp; staff &nbsp; 170 Oct 18 21:36 Public</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">Chases-MacBook-Air:~ chasearmstrong$&nbsp;</span></p></div>"	1. Access Rights<div>2. Links (child directories and files, parent dir .. , and accessing self . )</div><div>3. File or Directory Owner</div><div>4. File or Directory Group Owner</div><div>5. File Byte Size</div><div>6. Date Last Modified</div><div>7. Name of File or Directory</div>
What is ls -alt ?	"<code style=""margin: 0px 0.0625rem; padding: 0px 0.25rem; border: 0px; font-family: Monaco, Menlo, 'Ubuntu Mono', 'Droid Sans Mono', Consolas, monospace; line-height: inherit; font-size: 0.95em; vertical-align: baseline; word-break: break-word; box-sizing: border-box; border-top-left-radius: 0.125rem; border-top-right-radius: 0.125rem; border-bottom-right-radius: 0.125rem; border-bottom-left-radius: 0.125rem; color: rgb(32, 64, 86); background-color: rgb(212, 213, 214); white-space: nowrap;"">ls -alt</code><span style=""color: rgb(62, 62, 64); font-family: Oxygen, Oxygen, 'Segoe UI', 'Helvetica Neue', sans-serif; font-size: 16px;"">&nbsp;lists all contents, including hidden files and directories, in long format, ordered by the date and time they were last modified. It's a combination of ls -a , ls -l, ls -t .</span>"
What does the cp command do?	The cp terminal command copies the first file or directory into the second file or directory. For example:<div><br></div><div>cp app.rb app_folder</div>
How would you copy multiple things into a directory using cp?	cp directory/file_one.text directory/file_two.text target_directory
How would you navigate up two directories?	cd ../../
What does the following do?<div><br></div><div>cp * satire/</div><div><br></div><div>**Keep in mind satire is a directory.</div>	This copies all files from the present working directory into the satire/ directory.
What does the following do?<div><br></div><div>cp m*.txt scifi/</div><div><br></div><div>**Keep in mind scifi is a directory.</div>	That will select all files in the current working directory that start with m and end with .txt and copies them into the scifi folder.
How do you open the Nano text editor?	nano file_name
How do you save something in the nano text editor?	Control + O<div><br></div><div>the letter, not the number</div>
"What does the ""^"" stand for in the nano editor?"	Control
How do you display the help options in the nano text editor?	Control + G
How do you configure the environment settings? What do you type in the editor?	nano ~/.bash_profile<div><br></div><div>Once you do that, it will open the file that stores your environment settings. Of note here is that the ~ represents the user's home directory. The . is to make the file a hidden file. You must have it in exactly that format. Don't change the file name.</div>
How do you activate the changes in the current session?	source ~/.bash_profile<div><br></div><div>Typing that in the terminal will activate the changes to the current session.</div>
What is the purpose of the alias command? How would you use it?	"alias pd=""pwd""<div><br></div><div>This basically gives pd the same power as pwd in the terminal. If we save this in ~/.bash_profile using nano, we can then type:</div><div><br></div><div>pd</div><div><br></div><div>if we want to see the present working directory</div>"
How would you set an environment variable in the ~/.bash_profile file? How would you print the user from the terminal?	"export USER=""Your Name Here""<div><br></div><div>echo $USER</div><div><br></div><div>Of note here is that you have to use the $ sign to return a variable's value.</div><div><br></div><div>**Of note here is that you can't have spaces in setting the variable. For whatever reason, it won't work if you go:</div><div><br></div><div>export USER = ""Your Name Here""</div>"
"What does the PS1 variable represent? For example:<div><br></div><div>export PS1="">> ""</div>"	It changes the default command prompt from:<div><br></div><div>$</div><div><br></div><div>to whatever we put in the parenthesis. In this case that would be:</div><div><br></div><div>>>&nbsp;</div>
What happens if you type:<div><br></div><div>env</div><div><br></div><div>into the terminal?</div><div><br></div><div>What about if you type:</div><div><br></div><div>env | grep PATH</div>	It displays all the environment variables. If you combine env with grep, it will display only the one environment variable (in this case PATH)
This solution gave me a good insight into Ruby's right side evaluation:<div><br></div><div><div>def bubble_sort(arr)</div><div>&nbsp; sorted = false</div><div>&nbsp; until sorted</div><div>&nbsp; &nbsp; sorted = true</div><div>&nbsp; &nbsp; (arr.count - 1).times do |i|</div><div>&nbsp; &nbsp; &nbsp; if arr[i] > arr[i + 1]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; arr[i], arr[i + 1] = arr[i + 1], arr[i]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; sorted = false</div><div>&nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div><div><br></div><div>&nbsp; arr</div><div>end</div></div><div><br></div><div>You'll notice that on line 7 of the function, we put in arr[i + 1] and arr[i]. In Javascript, we would have to save one of those into a temporary variable, thus using a little bit more code. But in this case, because we evaluate the entire right side before assigning it to the variables on the left side, we can have both positions that will be swapped taken care of on this one line.</div>	
"While I may have already added something along these lines, what's the difference between using // and using """" within something like match, scan, etc?"	"The double forward slash marks signify a regex while the double quotes simply signify a string. For example, if we want to match something with any vowel (a,e,i,o,u) we would use the double forward slash marks as follows:<div><br></div><div>""some string"".match(/[aeiou]/)&nbsp;</div><div><br></div><div>If we did the same thing with quotations marks, as follows:</div><div><br></div><div>""some string"".match(""aeiou"") or ""some string"".match(""[aeiou]"")&nbsp;</div><div><br></div><div>the match method would looking for aeiou in a row or [aeiou] in a row. It would just interpret the brackets as part of what you are looking for as opposed to the ""look for any one of these"" regex brackets.</div><div><br></div><div>**After looking into this more, it's not exactly the way I described it. For example:</div><div><br></div><div>""my string"".count(""aeiou"")</div><div><br></div><div>will actually count the individual pieces that match the string. So I guess I'm not completely sure on this one.</div>"
"What's wrong with the following? How would you fix it?<div><br /></div><div>my_info = [1,2,3,4,5]<div>more_info = { name: ""Chase"" }</div><div><br /></div><div>def get_info</div><div>&nbsp; &nbsp;p my_info</div><div>&nbsp; &nbsp;p more_info</div><div>end</div></div>"	"For some reason, Ruby can't access those variables unless you put them in all caps (i.e. MY_INFO and MORE_INFO). I guess it means those variables are not in the functions scope unless passed to the function or put in all caps (making it a constant?)<div><br></div><div>MY_INFO = [1,2,3,4,5]</div><div>MORE_INFO = { name: ""Chase"" }</div><div><br></div><div>def get_info</div><div>&nbsp; &nbsp;p MY_INFO</div><div>&nbsp; &nbsp;p MORE_INFO</div><div>end</div><div><br></div><div>The above works just fine.</div>"
What's a REPL actually doing? What's in the script?	loop { p eval gets }<div><br></div><div>gets (READ)</div><div>eval (EVALUATE)</div><div>p (PRINT)</div><div>loop (LOOP)</div>
Do Rubyists use the IRB?	No. For the most part, they use PRY which is like the IRB but it has more features.
How would you launch pry in the terminal?	pry
How can you show documentation using pry?	"You simply type:<div><br></div><div>show-doc some_object.method</div><div><br></div><div>For example, you could do:</div><div><br></div><div>show-doc ""Chase"".length</div><div><br></div><div>and it will show the Ruby documentation for the length method, the same as is found on the Ruby documentation website.</div><div><br></div><div>I guess you could also do it like this:</div><div><br></div><div>show-doc String#length</div>"
How do you get out of pry without ending your terminal session?	type:<div><br></div><div>exit</div><div><br></div><div>in the terminal.</div>
What's the shortcut for:<div><br></div><div>show-doc Array#map</div>	? Array#map
"How do you escape from the notorious ""END"" that keeps popping up when you display methods in pry?"	simple type:<div><br></div><div>q</div><div><br></div><div>No idea why this works but it does.</div>
How do you navigate state in pry? What is it similar to?	"You can navigate using cd and ls just like you would to navigate directories in the terminal. Except in this case you are using them to navigate objects. For example, after launching pry you could:<div><br></div><div>pry(main) > arr = [1,2,3,4]</div><div>pry(main) > cd arr</div><div>pry(#<Array>):1> ls</div><div><br></div><div>The ""ls"" would list all of the objects methods, constants and variables that are accessible to pry. It's as if they were files inside the objects director.</div>"
What does the following do in pry:<div><br></div><div>ls -h</div>	It displays a list of all the flags you can add on to the ls command and what those flags would do.
"What's happening here?<div><br></div><div><p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">[15] pry(#<Array>):1> min</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">=> </span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>1</b></span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">[16] pry(#<Array>):1> max</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">=> </span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>4</b></span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">[17] pry(#<Array>):1> reverse</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">=> [</span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>4</b></span><span style=""font-variant-ligatures: no-common-ligatures"">, </span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>3</b></span><span style=""font-variant-ligatures: no-common-ligatures"">, </span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>2</b></span><span style=""font-variant-ligatures: no-common-ligatures"">, </span><span style=""font-variant-ligatures: no-common-ligatures; color: #5330e1""><b>1</b></span><span style=""font-variant-ligatures: no-common-ligatures"">]</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">[18] pry(#<Array>):1>&nbsp;</span></p></div>"	Once you have the object in question as the you current directory (is that even how you'd say that?) you can simply type the method name and it will give you what you would expect from the method.
How would you show a methods actual implementation (not documentation but the actual source code) from outside that object? What about inside that object?	Outside of object:<div><br></div><div>show-source Object#method_name</div><div><br></div><div>Inside of object:</div><div><br></div><div>show-source method_name</div>
What is Ruby's source code written in?	C
What is the shorthand way of writing:<div><br></div><div>show-source Array#count</div>	$ Array#count
What do you type to basically have a breakpoint to debug your code (pry not byebug)?	binding.pry<div><br></div><div>You put this wherever you want the code to stop when you're running it.</div>
What would you do to run the file and make it stop at a your binding.pry line in the terminal? (order.rb is the file name)	"<pre class="" language-bash"" style=""box-sizing: border-box; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 16px; margin-top: 0.5em; margin-bottom: 32px; padding: 1em; direction: ltr; background-color: rgb(249, 249, 250); text-shadow: rgb(255, 255, 255) 0px 1px; word-break: normal; word-wrap: normal; line-height: 1.5; tab-size: 4; -webkit-hyphens: none; overflow: auto; border: 1px solid rgba(51, 51, 51, 0.0980392);""><code class="" language-bash"" style=""box-sizing: border-box; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 1em; background-color: transparent; padding: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; text-shadow: rgb(255, 255, 255) 0px 1px; word-spacing: normal; word-break: normal; word-wrap: normal; line-height: 1.5; tab-size: 4; -webkit-hyphens: none;"">ruby -r pry  order.rb</code></pre>"
What does:<div><br></div><div>pry (#something_here)</div><div><br></div><div>mean?</div>	It means we're currently in an instance of something.
Let's say we have the following opened in pry to the point where we placed&nbsp;<div><br></div><div>binding.pry</div><div><br></div><div>What do we have access to? In other words, what variables can we output in pry to understand their current values?</div><div><br></div><div><div>class Order</div><div>&nbsp; def initialize</div><div>&nbsp; &nbsp; @line_items = []</div><div>&nbsp; end</div><div><br></div><div>&nbsp; def add_line_item(line_item)</div><div>&nbsp; &nbsp; @line_items << line_item</div><div>&nbsp; end</div><div><br></div><div>&nbsp; def total</div><div>&nbsp; &nbsp; subtotals = @line_items.each { |li| li.quantity * li.price }</div><div>&nbsp; &nbsp; binding.pry</div><div>&nbsp; &nbsp; subtotals.reduce(:+)</div><div>&nbsp; end</div><div>end</div></div>	We have access to the things already declared. In this case, we could type in<div><br></div><div>subtotals</div><div><br></div><div>in the terminal and we would see that the subtotals is actually the same as the line_items because we're using each and not map.</div>
How do you jump back into your code in the middle of a pry debugging session and make changes?	<div>edit whatever_you'd_like_to_edit(method name?)<br /></div>
After you've made your changes with pry and you want to see if it works, how would you test the line of code after the binding.pry?	<div><br></div><div><div>play -l line_number</div><div><br></div><div>For example:</div><div><br></div><div>play -l 13</div></div>
What is bye bug? How do you install install it? How do you use it with your program?	byebug is a debugger. You install it by typing:<div><br></div><div>gem install byebug</div><div><br></div><div>in your terminal which I've already done. You use it with a file by typing:</div><div><br></div><div>require 'byebug'</div><div><br></div><div>at the beginning of your file. You then type</div><div><br></div><div>debugger</div><div><br></div><div>on the line before you would want to stop (the debugger starts on the line right after that line).</div>
What is the difference between next and step with byebug?	Next will go to the next line on the same level and step will actually step into the code (even if it's on an indented level)
How would you go through executing the program with byebug?	You would say:<div><br></div><div>continue</div><div><br></div><div>in the terminal.</div>
What's the shortcut for calling next with byebug?	n
How would you make it so you don't have to print something out with each iteration using byebug?	You would use:<div><br></div><div>display variable_name</div><div><br></div><div>What happens with that is that now, each time the code stops, it will print out those variables. It allows us to see what is happening throughout the code to identify what is going wrong.</div>
If you're looking to get out of a method call using byebug, what do you put in the terminal?	finish<div><br></div><div>**It's important to note that if you're inside an iterator (each for example) finish won't get you all the way through that. It will only get you to the next iteration.</div>
With byebug, if you're looking to continue on to a certain point in your code and then stop there (already in byebug, can't use debugger word), what would you do?	You would first add in a break point on the line that you want to continue on to:<div><br></div><div>b line_number</div><div><br></div><div>ex.</div><div><br></div><div>b 23</div><div><br></div><div>From there, you'd put in:</div><div><br></div><div>continue</div><div><br></div><div>in the terminal and the program would execute up to the line where you inserted a break point.</div>
What if you want to begin debugging a program right for the get go?<div><br></div>	<div><br></div><div><div>simply put:</div><div><br></div><div>byebug file_name.rb</div><div><br></div><div>in the terminal and it will start from the beginning.</div></div><div><br></div><div>**It's important to note here that you don't need to require byebug at the beginning of a file if you go with this route. You can but it's not necessary.</div>
What should you run byebug with?	pry
What are gems?	Bundles of code loaded from the internet.
How do you load a gem in Ruby?	require 'gem_name'
Why won't the following work (the following is lines from the terminal)?<div><br></div><div>touch hello_world.rb<div>pry</div><div>require 'hello_world'</div></div>	It won't work because you have to specify the file path. The only exception is gems. Here, you would need to do the following:<div><br></div><div>touch hello_world.rb</div><div>pry</div><div>require './hello_world'</div><div><br></div><div>**Of note is that this only applies if it's in the current directory. In this case, we know it is because we just created the file in that directory. Also of note is that require automatically puts on the .rb so we don't need to include that here?</div>
What happens if you require a file twice? For example?<div><br></div><div>pry</div><div>require './hello_world' #loads hello_world</div><div>require './hello_world'</div>	It won't load it the second time because it has already been loaded.
What would you use if you need to load something a second time? Remember that require won't load the file again if it has already been loaded.	load './file_name.rb'<div><br></div><div>**Here we have to put the .rb onto the end. Load will load something even if it has already been loaded. It's useful if we're making changes to our file while we're playing with it in pry.</div>
What is the difference between a script file and a library file?	A library file is meant to be loaded by other Ruby code while a script file is meant to be run as a program.
What do you need to do to a file and in the terminal to go from running a Ruby script by invoking by invoking Ruby directly:<div><br></div><div>ruby file_name.rb</div><div><br></div><div>to executing a file simply by using its name:</div><div><br></div><div>./file_name.rb</div>	First, you have to include the following at the beginning of your ruby file:<div><br></div><div>#!/usr/bin/env ruby<br></div><div><br></div><div>Second, you have to navigate to the directory that the file is in on your terminal and run:</div><div><br></div><div>chmod +x script.rb<br></div><div><br></div><div>**From what I understand about this particular piece of information, I imagine that this is the way we actually distribute Ruby code and make it a working part of our application. From what I understand, it's a way of changing the file in some way so that we don't have to invoke the Ruby VM to run the code (or maybe it's just building into the file the ability to call the VM to interpret the code?)&nbsp;</div>
What variable represents the name of the Ruby source file?	__FILE__<div><br></div><div>**Of note is that there are two underscores on each side of FILE.</div>
What variable represents the name of the Ruby source file?	__FILE__<div><br></div><div>**Of note is that there are two underscores on each side of FILE.</div>
What variable represents the name of the executing program?	$PROGRAM_NAME
What would you do if you want to have a file run as a script but also as a library?	"<div>#!/usr/bin/env ruby</div><div><br></div><div>def say_hello(name)</div><div>&nbsp; puts ""Hey there, #{name}!""</div><div>end</div><div><br></div><div>if $PROGRAM_NAME == __FILE__</div><div>&nbsp; name = gets.chomp</div><div>&nbsp; say_hello(name)</div><div>end</div><div><br></div><div>**What happens here is if you require the file in pry, the $PROGRAM_NAME variable will by 'pry' and the __FILE__ variable will be the file name. So you'll still have access to the say_hello method but it won't be executed. On the other hand, if you run this as it's own file, the $PROGRAM_NAME and the __FILE__ will be the same and so it will execute immediately like a script would upon being called.</div>"
What is the difference between a method and a function?	A method is associated with (and usually called on) object while a function is not. With Ruby being an Object Oriented Language, we only use methods. No functions.
What is a side effect?	"A method that uses a side effect interacts with the outside world but it doesn't return anything useful. For example:<div><br></div><div>p ""Chase""</div><div><br></div><div>prints Chase to the console but it returns nil, something that's not useful.</div>"
What are RSpec files?	Ruby scripts that are used to test your code.
What do the following do?<div><br></div><div>gem install bundler</div><div>bundle install</div>	This first installs the bundler gem which is a tool for managing the development environment for a project. Basically, it makes it so you and someone else will be seeing things the same (I think). The second will download and install gems from the Gemfile, including RSpec.
When do we use p vs. puts?	p is for developers to see and puts is used when we have something we want a non-programmer to see.
What is the root object for Ruby?	In Ruby, everything is an object. Everything inherits from a root class (Object) which actually inherits from an object called BasicObject.
"What does the following do?<div><br></div><div>""my name is Chase""[5,2]</div>"	"It accesses the substring ""me"" because it starts at index 5 and takes 2.&nbsp;"
"What does the following do?<div><br></div><div>""my name is Chase""[5,2]</div>"	"It accesses the substring ""me"" because it starts at index 5 and takes 2.&nbsp;"
What does the:<div><br></div><div>*</div><div><br></div><div>method do to a string?</div>	It multiplies it.
How do you run the rspec on a certain file in cloud9? On all the files?	"<span style=""color: rgb(51, 51, 51); font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; background-color: rgba(0, 0, 0, 0.0392157);"">bundle exec rspec spec/00_hello_spec.rb</span><div><span style=""color: rgb(51, 51, 51); font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; background-color: rgba(0, 0, 0, 0.0392157);""><br></span></div><div><span style=""color: rgb(51, 51, 51); font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; background-color: rgba(0, 0, 0, 0.0392157);"">bundle exec rspec</span><br></div>"
What is the topmost stack trace telling us? Below that?	The topmost thing in the stack is telling us where the error was found. Right below that we have the thing that called it last. Basically it works its way backwards.
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">add_to_array!</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">array</span>, <span class=""pl-smi"" style=""box-sizing: border-box;"">item</span>)   array <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);""><<</span> item <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>  my_array <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> [] add_to_array!(my_array, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>an item!<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>) p my_array</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><br></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">What will my_array do?</pre>"	"For some reason my_array will have ""an item!"" inside of it. Supposedly this is because the my_array variable references that object and we're adding something to it although I will say I'm a little confused."
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">maybe</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">flag</span>, <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span><span class=""pl-smi"" style=""box-sizing: border-box;"">prc</span>)   prc.call <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">if</span> flag <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);""><br></span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">What is the purpose of the &amp;prc in the method definition?</span></pre>"	The purpose is to signify that it should hold a block which means that it won't be included in the parameters for the method being called but rather in a block. If it is included in the parameters as a Proc, we would need to include &amp; when the method is called which would turn it into a block. Then the &amp; in the function definition turns it back into a Proc so that it can be stored until we call it on the next line.
What is the difference between a block and a Proc?	A block is just Ruby code. It's not an object. A Proc on the other hand is an object. We usually save blocks and Procs so that we can use them later.
REPLACE_ME	<br>
How do you add in multiple Procs to a method?	"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;"">proc_add_1 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">Proc</span>.<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">new</span> {|<span class=""pl-smi"" style=""box-sizing: border-box;"">num</span>| num <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>} proc_add_2 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">Proc</span>.<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">new</span> {|<span class=""pl-smi"" style=""box-sizing: border-box;"">num</span>| num <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">2</span>}  <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">chain_blocks</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">start_val</span>, <span class=""pl-smi"" style=""box-sizing: border-box;"">proc1</span>, <span class=""pl-smi"" style=""box-sizing: border-box;"">proc2</span>, <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span><span class=""pl-smi"" style=""box-sizing: border-box;"">proc3</span>)   val1 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> proc1.call(start_val)   val2 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> proc2.call(val1)   val3 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> proc3.call(val2)    val3 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>  chain_blocks(<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>, proc_add_1, proc_add_2) <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">do </span>|<span class=""pl-smi"" style=""box-sizing: border-box;"">num</span>|   num <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">3</span> <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre></pre>"
What will happen if you use return inside of a Ruby Proc?	It will escape the proc and give control back to the calling method.
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">[<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">2</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">3</span>].map(<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span>add_one)</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">Why do we use the &amp;?</pre>"	It signifies to Ruby that the argument isn't a normal argument but instead a Proc.<div><br></div><div>**Remember that the &amp; can be used in three ways...</div><div><br></div><div>1. To convert a block to a proc.</div><div>2. To convert a method (passed as a symbol) to a proc.</div><div>3. To convert a proc to a block.</div>
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">[<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">6</span>] pry(main)<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">></span> [<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">2</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">3</span>].map(<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span>add_one) { <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>an actual block!<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span> }</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">Why won't that work?</pre>"	Because we can't pass one proc in with &amp;add_one and another block in as the block.<div><br></div><div>**It seems like a better explanation to say that we can't pass more than block into the method. Here, for example, when we use the &amp; sign we're basically saying that is a block and then we're passing the method map another block in the form of {}.&nbsp;</div>
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">[<span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>a<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>b<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>c<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>].map(<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span><span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:upcase</span>) [<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">2</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">5</span>].select(<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span><span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:odd?</span>)</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">What is the &amp;: a shortcut for?</pre>"	"It's a shortcut for a Proc that takes a single argument and runs a method on that argument.<div><br></div><div>Ex.</div><div><br></div><div>[""a"", ""b"", ""c""].map { |char| char.upcase }</div><div>[1, 2, 5].select { |num| num % 2 != 0 }</div><div><br></div><div>It's important to note that it only works with methods defined on a class. For example:</div><div><br></div><div><div>class Fixnum</div><div>&nbsp; def double</div><div>&nbsp; &nbsp; self * 2</div><div>&nbsp; end</div><div>end</div><div>new_double = [1,2,3,4].map(&amp;:double)</div><div>p new_double</div></div><div><br></div><div>That will work just fine but the following will not:</div><div><br></div><div>def double(num)</div><div>&nbsp; &nbsp;num * 2</div><div>end</div><div><br></div><div>new_double = [1,2,3,4].map(&amp;:double)</div><div>p new_double</div><div><br></div><div>As expected, that creates lots of errors.</div>"
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">[<span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>a<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>b<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>c<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>].map(<span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">&amp;</span><span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:upcase)</span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#0086b3"">What is happening here in Ruby?</font></pre>"	The &amp; is calling #to_proc on a symbol (:upcase), which gives us back a Proc object with the symbol on its argument (i.e {|char| char.upcase } )
What does the &amp; symbol do in Ruby?	"<ul style=""box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px;""><li style=""box-sizing: border-box;"">Converts blocks to procs</li><li style=""box-sizing: border-box; margin-top: 0.25em;"">Converts method names (passed as symbols) to procs</li><li style=""box-sizing: border-box; margin-top: 0.25em;"">Converts procs to blocks</li></ul>"
How would you fix the following method so that it runs even if no block is given?<div><br></div><div>def possible_block</div><div>&nbsp; &nbsp;yield</div><div>end</div><div><br></div><div>possible_block</div>	def possible_block<div>&nbsp; &nbsp;yield if block_given?</div><div>end</div>
What are the four ways you can call a Proc?	"my_proc = Proc.new { |a| p ""This is my proc and #{a} was passed to me."" }<div><br></div><div>my_proc.call(10) # ""This is my proc and 10 was passed to me.""</div><div>my_proc.(20) # ""This is my proc and 20 was passed to me.""</div><div>my_proc[30] # ""This is my proc and 30 was passed to me.""</div><div>my_proc === 40 # ""This is my proc and 40 was passed to me.""</div>"
"What is the following doing? How does it work?<div><br></div><div>greater_than_ten = Proc.new{ |n| n > 10 }</div><div>less_than_ten = Proc.new{ |n| n < 10 }</div><div>is_ten = Proc.new { |n| n == 10 }</div><div><br></div><div>0.upto(10) do |number|</div><div>&nbsp; &nbsp;case number</div><div>&nbsp; &nbsp;when greater_than_ten</div><div>&nbsp; &nbsp; &nbsp; p ""#{number} is greater than ten.""</div><div>&nbsp; &nbsp;when less_than_ten</div><div>&nbsp; &nbsp; &nbsp; p ""#{number} is less than ten.""</div><div>&nbsp; &nbsp;when is_ten</div><div>&nbsp; &nbsp; &nbsp; p ""#{number} is ten""</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp; &nbsp; p ""How is this possible?""</div><div>&nbsp; &nbsp;end</div><div>end</div>"	What's happening here is usually the case statement will take the case equality operator to check if a value is the same (===). However, that case equality operator is also used to call a Proc. So in this case, using Procs, number will be passed into the Proc and will be evaluated to see whether or not it is true.
What kind of object is a lambda?	It's a special kind of Proc object.
How does Ruby treat the following in 1.8? After 1.8?<div><br></div><div>my_proc = proc {|n| n > 3 }</div>	In Ruby 1.8, it is treated as a lambda. After 1.8 (current versions), it is treated as a shortcut way to say:<div><br></div><div>Proc.new</div>
How does the semicolon work in Ruby?	It signifies the end of a line if you want to continue running on that line. For example, a normal Ruby method definition would look like this:<div><br></div><div>def say_my_name(name)</div><div>&nbsp; &nbsp;p name</div><div>end</div><div><br></div><div>This is how it would look on just one line:</div><div><br></div><div>def say_my_name(name); p name; end</div>
What is a closure?	"<span style=""color: rgb(37, 37, 37); font-family: sans-serif; font-size: 14px;"">A closure—unlike a plain function—allows the function to access those&nbsp;</span><i style=""color: rgb(37, 37, 37); font-family: sans-serif; font-size: 14px;"">captured variables</i><span style=""color: rgb(37, 37, 37); font-family: sans-serif; font-size: 14px;"">&nbsp;through the closure's copies of their values or references, even when the function is invoked outside their scope.</span><div><span style=""color: rgb(37, 37, 37); font-family: sans-serif; font-size: 14px;""><br></span></div><div><span style=""color: rgb(37, 37, 37); font-family: sans-serif; font-size: 14px;"">**Basically, closures are functions that make a copy to a value or reference so that said value or reference can be used when the value is invoked outside of the functions scope. Ruby is special because it just creates a copy to the reference, allowing you to change the reference after the closure has been created.</span></div>"
What is a bang in ruby?	It's simply the exclamation point:<div><br></div><div>!</div>
What does API stand for?	Application Programming Interface<div><br /></div><div>Basically you can think of it as a library that abstracts what is actually happening into more manageable concepts to reduce the cognitive load on the developer.</div>
What is proc short for?	proc is short for procedure
Why are block and lambda lowercase but Proc is uppercase?	Because block and lambda are not proper classes but are instead Procs. Proc however is a proper class.
"<pre style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><code class=""language-ruby"" data-lang=""ruby"" style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border: 0px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">class</span> <span class=""nc"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(68, 85, 136); font-weight: bold;"">Array</span>   <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">def</span> <span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">iterate!</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">(</span><span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">&amp;</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">code</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">)</span>     <span class=""nb"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(0, 134, 179);"">self</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">.</span><span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">each_with_index</span> <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">do</span> <span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">|</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">n</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">,</span> <span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">i</span><span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">|</span>       <span class=""nb"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(0, 134, 179);"">self</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">[</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">i</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">]</span> <span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">=</span> <span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">code</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">.</span><span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">call</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">(</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">n</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">)</span>     <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span>   <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span> <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span></code></pre><pre style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><code class=""language-ruby"" data-lang=""ruby"" style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border: 0px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;""><br></span></code></pre><pre style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><code class=""language-ruby"" data-lang=""ruby"" style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border: 0px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;""><pre style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; word-wrap: break-word; border: 1px solid rgb(204, 204, 204); font-weight: normal; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><code class=""language-ruby"" data-lang=""ruby"" style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border: 0px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">class</span> <span class=""nc"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(68, 85, 136); font-weight: bold;"">Array</span>   <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">def</span> <span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">iterate!</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">(</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">code</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">)</span>     <span class=""nb"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(0, 134, 179);"">self</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">.</span><span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">each_with_index</span> <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">do</span> <span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">|</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">n</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">,</span> <span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">i</span><span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">|</span>       <span class=""nb"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(0, 134, 179);"">self</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">[</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">i</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">]</span> <span class=""o"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">=</span> <span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">code</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">.</span><span class=""nf"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; color: rgb(153, 0, 0); font-weight: bold;"">call</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">(</span><span class=""n"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">n</span><span class=""p"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;"">)</span>     <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span>   <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span> <span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">end</span></code></pre><pre style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; word-wrap: break-word; border: 1px solid rgb(204, 204, 204); font-weight: normal; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><code class=""language-ruby"" data-lang=""ruby"" style=""box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border: 0px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important;""><span class=""k"" style=""box-sizing: border-box; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; font-weight: bold;"">Why does one of these contain &amp;code and the other contains code?</span></code></pre></span></code></pre>"	Because with one of them we are passing a block and with the other we are passing a Proc. The &amp; symbol converts the block into a useable Proc object.
<div>How can you make the defined method into a lambda?</div><div><br /></div><div>def double(num)</div><div>&nbsp; num * 2</div><div>end</div>	method(double)<div><br /></div><div># This gives us a lambda object. We could also use this to do cool things. For example, we write:</div><div><br /></div><div>def times(a, b)</div><div>&nbsp; &nbsp;a * b</div><div>end</div><div><br /></div><div>times_ten = method(:times).curry.call(10)</div><div><br /></div><div>We could then do:</div><div><br /></div><div>times_ten.call(20) #=> 200</div>
How can you test whether or not something is a Proc or a lambda in Ruby 1.9?	"my_proc = Proc.new { p ""I'm a proc"" }<div>my_lambda = lambda { p ""I'm a lambda"" }</div><div><br></div><div>my_proc.lambda? #=> returns false</div><div>my_lambda.lambda? #=> returns true</div>"
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">def some_method   Proc.new end  my_proc = some_method{puts ""I am a happy proc""} my_proc.call</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">What does that do? What will my_proc.call show?</pre>"	If nothing is assigned to a Proc, it will look to see if there was a block passed to the function. If there was, it will assign that to the Proc.
What are the only two ways that two Proc objects can be equal?	"The first is if one Proc is a clone of the other. For example:<div><br></div><div>proc_one = Proc.new{ p ""Proc 1"" }</div><div>proc_two = proc_one.dup</div><div><br></div><div>p proc_one == proc_two #=> returns true</div><div><br></div><div>The other is to define two simple Procs that have the same object in them.</div><div><br></div><div>my_arr = [1,2,3,4,5]</div><div>proc_one = Proc.new { my_arr }</div><div>proc_two = Proc.new { my_arr }</div><div><br></div><div>p proc_one == proc_two #=> returns true</div><div><br></div><div>Other than that, two Procs will never be equal to each other, even if they are written the exact same way.</div>"
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">my_proc = Proc.new{|x|""blah1""*x} puts ""#{my_proc.arity}""</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#What will my_proc.arity tell you?</pre>"	It tells you how many arguments your Proc needs. In this case, it only needs 1 and will return 1.
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; background-position: 0px 0px; background-repeat: repeat repeat;"">my_proc = Proc.new{|x, *rest|""blah1 #{x} - #{rest}""} puts ""I need #{my_proc.arity} arguments""</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; background-position: 0px 0px; background-repeat: repeat repeat;"">#What will be returned in this case?</pre></pre>"	In this case, it will return -2 with the negative signifying that there are a limitless number of arguments you can pass in.
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">my_proc = Proc.new{|x, *rest|""blah1 #{x} - #{rest}""} puts ""I actually require #{~my_proc.arity} arguments, the rest are optional""</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#How do you find out how many arguments are required?</pre>"	The ~symbol helps you to do that. In this case it will return 1 because you only need 1 argument.
What is the select method less commonly known as?	find_all
What will the following produce in pry?<div><br></div><div>(1..10)</div><div>(1..10).to_a</div><div>(10..1)</div>	1..10 #=> this is a range, not to be confused with an array from one to ten<div>[1,2,3,4,5,6,7,8,9,10] #=> to_a converts a range into an array</div><div>[ ] #=> this essentially does nothing, it won't work</div>
What's the max you should go on nesting? What should you do to avoid nesting?	"Two levels deep is probably the max. Going deeper is usually a bad idea. Instead of continually nesting, you'll want to break off the levels into separate functions. For example, instead of doing this:<div><br></div><div><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">(<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>..<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">10</span>).each <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">do </span>|<span class=""pl-smi"" style=""box-sizing: border-box;"">i</span>|   multiples <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> []   (<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>..<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">10</span>).each <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">do </span>|<span class=""pl-smi"" style=""box-sizing: border-box;"">j</span>|     multiples <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);""><<</span> i <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">*</span> j   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    p multiples <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d"">You'd want to do:</font></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">multiples</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">i</span>)   ms <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> []   (<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>..<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">10</span>).each <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">do </span>|<span class=""pl-smi"" style=""box-sizing: border-box;"">j</span>|     ms <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);""><<</span> i <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">*</span> j   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    ms <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>  (<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>..<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">10</span>).each <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">do </span>|<span class=""pl-smi"" style=""box-sizing: border-box;"">i</span>|   p multiples(i) <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre></pre></div>"
What does the Benchmark module do? How can you use it in your file?	"The Benchmark module helps you see the time that it takes to run a certain method or block of code. You use it by first doing:<div><br /></div><div>require ""benchmark""&nbsp;</div><div><br /></div><div>at the top of your file. Then you use the following syntax:</div><div><br /></div><div>time_to_run = Benchmark.realtime do</div><div>&nbsp; &nbsp;#the method or block of code that you want executed (call it)</div><div>end</div>"
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">i=0 puts(loop do   i+=1   print ""#{i} ""   break 'Hello' if i==10 end)</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#=> What does the break 'Hello' block of code do?</pre>"	Basically break 'Hello' allows you to return a value from the loop. Here we would have the following printed to the console:<div><br></div><div>1 2 3 4 5 6 7 8 9 10 Hello</div>
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">i=1 until i > 10   print ""#{i} ""   i+=1   redo if i > 10 end</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#=> What does the redo keyword do here?</pre>"	Basically it restarts the loop without evaluating the condition (until i > 10). Not sure why we'd ever use it but at least you can see what it does in the event that it ever comes up in code you're looking at.&nbsp;
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">i=0 print ""#{i+=1} "" while i < 10</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#=> What's unique about this code?</pre>"	We're using while as a modifier (just like we do with if). We can do the same thing with until.
How do you simulate the do...while loop in Ruby (code is performed at least once) and the do...until loop in Ruby (code is performed at least once)?	"i = 11<div>begin</div><div>&nbsp; &nbsp;p i</div><div>&nbsp; &nbsp;i += 1</div><div>end while i < 10</div><div><br></div><div>#=> This will print 11 and will then will end.</div><div><br></div><div>i = 10</div><div>begin</div><div>&nbsp; &nbsp;p i</div><div>&nbsp; &nbsp;i += 1</div><div>end until i == 11</div><div><br></div><div>#=> This will print 10 and then end.</div><div><br></div><div>**A good way to think of the end is ""keep doing this"" while #some test is true and ""keep doing this"" until #some test is true.</div>"
"<pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">1.step(10, 2) { |i| print ""#{i} ""}</pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;""><br></pre><pre lang=""ruby"" style=""background-image: none; background-attachment: scroll; background-color: rgb(238, 238, 238); border: 1px solid rgb(221, 221, 221); clear: both; overflow: auto; margin: 0px 2px; padding: 2px 5px; color: rgb(34, 34, 34); font-size: 16px; background-position: 0px 0px; background-repeat: repeat repeat;"">#=> What does the step iterator do?</pre>"	It's like the upto method but instead of skipping by 1 each time, it skips by the second parameter that you pass into it. For example, in this case we will get:<div><br></div><div>1 3 5 7 9</div>
How would you include class Time in the Ruby file you're working with?	require 'time'
What method can you use to get the current time after including the Time class in your file?	Time.now
What is a stub? How is it used?	"A stub is used for testing purposes (saw it in spec testing file). Basically, we're setting a fake unit on a test and then testing our method with that fake unit. I guess it saves us from having to do the actual test on a database or something like that. See below for an example. You'll notice that at the beginning we set a fake time (it's not really eleven am) and then we're testing our methods time against that fake time as if it was the real time.<div><br></div><div><div>describe ""Performance Monitor"" do</div><div>&nbsp; before do</div><div>&nbsp; &nbsp; @eleven_am = Time.parse(""2011-1-2 11:00:00"")</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""takes about 0 seconds to run an empty block"" do</div><div>&nbsp; &nbsp; elapsed_time = measure { }</div><div><br></div><div>&nbsp; &nbsp; expect(elapsed_time).to be_within(0.1).of(0)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""takes exactly 0 seconds to run an empty block (with stubs)"" do</div><div>&nbsp; &nbsp; allow(Time).to receive(:now).and_return(@eleven_am)</div><div><br></div><div>&nbsp; &nbsp; elapsed_time = measure { }</div><div><br></div><div>&nbsp; &nbsp; expect(elapsed_time).to eq(0)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""takes about 1 second to run a block that sleeps for 1 second"" do</div><div>&nbsp; &nbsp; elapsed_time = measure { sleep 1 }</div><div><br></div><div>&nbsp; &nbsp; expect(elapsed_time).to be_within(0.1).of(1)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""takes exactly 1 minute to run a block that sleeps for 1 minute (with stubs)"" do</div><div>&nbsp; &nbsp; fake_time = @eleven_am</div><div>&nbsp; &nbsp; allow(Time).to receive(:now) { fake_time }</div><div><br></div><div>&nbsp; &nbsp; elapsed_time = measure do</div><div>&nbsp; &nbsp; &nbsp; fake_time += 60 &nbsp;# adds one minute to fake_time</div><div>&nbsp; &nbsp; end</div><div><br></div><div>&nbsp; &nbsp; expect(elapsed_time).to eq(60)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""runs a block N times"" do</div><div>&nbsp; &nbsp; n = 0</div><div><br></div><div>&nbsp; &nbsp; measure(4) { n += 1 }</div><div><br></div><div>&nbsp; &nbsp; expect(n).to eq(4)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""returns the average time, not the total time, when running multiple times"" do</div><div>&nbsp; &nbsp; run_times = [8,6,5,7]</div><div>&nbsp; &nbsp; fake_time = @eleven_am</div><div>&nbsp; &nbsp; allow(Time).to receive(:now) { fake_time }</div><div><br></div><div>&nbsp; &nbsp; average_time = measure(4) do</div><div>&nbsp; &nbsp; &nbsp; fake_time += run_times.pop</div><div>&nbsp; &nbsp; end</div><div><br></div><div>&nbsp; &nbsp; expect(average_time).to eq(6.5)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; it ""returns the average time when running a random number of times for random lengths of time"" do</div><div>&nbsp; &nbsp; fake_time = @eleven_am</div><div>&nbsp; &nbsp; allow(Time).to receive(:now) { fake_time }</div><div>&nbsp; &nbsp; number_of_times = rand(10) + 2</div><div><br></div><div>&nbsp; &nbsp; average_time = measure(number_of_times) do</div><div>&nbsp; &nbsp; &nbsp; delay = rand(10)</div><div>&nbsp; &nbsp; &nbsp; fake_time += delay</div><div>&nbsp; &nbsp; end</div><div><br></div><div>&nbsp; &nbsp; expect(average_time).to eq((fake_time - @eleven_am).to_f/number_of_times)</div><div>&nbsp; end</div><div>end</div></div><div><br></div>"
What does the ruby word:<div><br></div><div>raise</div><div><br></div><div>do?</div>	"It raises an error. The place I learned this is with procs. For example, let's say we have a function that takes a block of code and does something.<div><br></div><div>def do_proc_twice(to_me, &amp;prc)</div><div>&nbsp; &nbsp;raise ""NO BLOCK PROVIDED"" if prc.nil?</div><div>&nbsp; &nbsp;2.times { prc.call(to_me) }</div><div>end</div><div><br></div><div>#=> Now that the method definition is set up and is ready to go, let's call it but leave off the necessary block.</div><div><br></div><div>do_proc_twice(5)&nbsp;</div><div><br></div><div>#=> What happens here is my command line will raise an error where it actually says in the error: ""NO BLOCK PROVIDED"" as it exits the method.</div>"
"What is the nil in the following (from IRB)?<div><br></div><div><p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">2.2.4 :003 > print ""Test""</span></p> <p style=""margin: 0px; font-size: 11px; line-height: normal; font-family: Menlo;""><span style=""font-variant-ligatures: no-common-ligatures"">Test => nil&nbsp;</span></p></div>"	It is the return value of the print method. Yes, it prints Test but that is only a side effect.
What does the .chop and .chop! methods do?	It chops off the last character in a string (can be used with safe and unsafe methods).
"The following is written for an object oriented language. How would you write the same thing in a non-object oriented language (called a functional language?)?<div><br></div><div>class Dog</div><div>&nbsp; &nbsp;def bark</div><div>&nbsp; &nbsp; &nbsp; p ""Woof!""</div><div>&nbsp; &nbsp;end</div><div>end</div>"	"def bark<div>&nbsp; &nbsp;p ""Woof!""</div><div>end</div><div><br></div><div>**You'll notice here that the function isn't tied to any particular class (although in Ruby everything is tied to the Object class internally).</div>"
How does the between method work? Use it to say if a number is between 13 and 19.	some_num.between?(13, 19)<div><br></div><div>**Of note is that this is inclusive (i.e. the number can be between 13 and 19.</div>
How would you create a multi-line string using delimiters?	"%q{this is one line<div>and another line</div><div>and another line}</div><div><br></div><div>#=> shows as</div><div><br></div><div>""this is one line\nand another line\nand another line""</div>"
What does the following do?<div><br></div><div>my_string = <<END_MY_STRING_PLEASE</div><div>this is line one</div><div>this is line two</div><div>END_MY_STRING_PLEASE</div>	"It creates the string:<div><br></div><div>""this is line one\nthis is line two""</div><div><br></div><div>Basically the << followed by a custom delimiter, allows you to start and end your string with whatever you want just like you were using { }.</div><div><br></div><div>**Of note here is that the first line can't have any tabs or spaces before the <<whatever_you_say and that same with the last line. Tabs or spaces on the inside lines will be captured in the new string.</div>"
"What does the following do?<div><br></div><div>x = ""This is a test""</div><div><br></div><div>puts x.sub(/^../, 'Hello')</div>"	It matches the first two characters of the string (the ^ character being an anchor meaning the beginning of a line) and so you get:<div><br></div><div>Hellos is a test</div>
"What does the following do?<div><br></div><div>x = ""This is a string""</div><div><br></div><div>p x.sub(/..$/, 'Hello')</div>"	The regular expression matches the last two character at the end of the line (anchoring with $) and replaces those characters with Hello.<div><br></div><div>This is a striHello</div>
How are \A and \Z used in regular expressions?	\A means to anchor for the beginning of a string and \Z means to anchor for the end of a string.
What do the following modifiers do to Ruby regular expressions:<div><br></div><div>*</div><div>+</div><div>*?</div><div>+?</div><div>?</div><div>{x}</div><div>{x,y}</div>	* - Match zero or more occurrences of the preceding character and match as many as possible.<div><br></div><div>+ - Match one or more occurrences of the preceding character and match as many as possible.</div><div><br></div><div>*? - Match zero or more occurrences of the preceding character and match as few as possible.</div><div><br></div><div>+? - Match one or more occurrences of the preceding character and match as few as possible.</div><div><br></div><div>? - Match either one or none of the preceding character.</div><div><br></div><div>{x} - Match x occurrences of the preceding character.</div><div><br></div><div>{x,y} - Match at least x occurrences and at most y occurrences of the preceding character.</div>
What do parenthesis do in a regular expression?	"It makes the data matched by that section of the regular expression available separately from the rest. For example:<div><br></div><div>""aaabbbccc"".scan(/\w/)</div><div><br></div><div>#=> [""a"", ""a"", ""a"", ""b"", ""b"", ""b"", ""c"", ""c"", ""c""]</div><div><br></div><div>""aaabbbccc"".scan(/(\w)/)</div><div><br></div><div>#=> [[""a""], [""a""], [""a""], [""b""], [""b""], [""b""], [""c""], [""c""], [""c""] ]</div>"
"What will the following return?<div><br></div><div>""This is a test"" =~ /[aeiou]/</div>"	It will return 2 because that is the position of the first match.
"What's a shorter way to write the following?<div><br></div><div>fruit = ""orange""</div><div>case fruit</div><div>&nbsp; &nbsp;when ""orange""</div><div>&nbsp; &nbsp;color = ""orange""</div><div>&nbsp; &nbsp;when ""apple""</div><div>&nbsp; &nbsp;color = ""green""</div><div>&nbsp; &nbsp;when ""banana""</div><div>&nbsp; &nbsp;color = ""yellow""</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp;color = ""unknown""</div><div>end</div>"	"color = case fruit<div>&nbsp; &nbsp;when ""orange""</div><div>&nbsp; &nbsp;""orange""</div><div>&nbsp; &nbsp;when ""apple""</div><div>&nbsp; &nbsp;""green""</div><div>&nbsp; &nbsp;when ""banana""</div><div>&nbsp; &nbsp;""yellow""</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp;""unknown""</div><div>end</div>"
How do you use the following methods? What do each of them do?<div><br></div><div>hour</div><div>min</div><div>sec</div><div>usec&nbsp;</div><div>day</div><div>wday</div><div>yday&nbsp;</div><div>month</div><div>year</div><div>zone</div>	First, you have to get an instance of the Time class using:<div><br></div><div>t = Time.now</div><div><br></div><div>Then, you can use the methods as follows:</div><div><br></div><div>t.hour #=> returns the current hour in military time (4pm is 16)</div><div>t.min #=> returns the current minute (4:30 is 30)</div><div>t.sec #=> 4:30 and 14 seconds is 14</div><div>t.usec #=> The number of microseconds past the second (There are 1,000,000 microseconds per second.)</div><div>t.day #=> The number of the day in the month</div><div>t.wday #=> The number of the day in week</div><div>t.yday #=> The number of the day in the year</div><div>t.month #=> The number of the month in the year</div><div>t.year #=> The number of the year</div><div>t.zone #=> Returns the name of the time zone associated with the time.</div><div><br></div>
"Which of the following is better and why?<div><br></div><div>current_situation = ""good""</div><div>puts ""Everything is fine"" if current_situation == ""good""</div><div>puts ""PANIC!"" if current_situation == ""bad""</div><div><br></div><div>or</div><div><br></div><div>current_situation = :good</div><div>puts ""Everything is fine"" if current_situation == :good</div><div>puts ""PANIC!"" if current_situation == :bad</div>"	"The second is better because I guess symbols only get created as an object one time. In the first one, the objects that are created ""good"", ""good"", and ""bad"" while the objects created in the second one are :good and :bad."
What do you use to work with files in Ruby (think IO) ? How would you open a file in Ruby?	"You use the Ruby File class.&nbsp;<div><br></div><div>File.open(""file name if in current directory with extension"").each {|line| puts line }</div>"
"What data will be stored in the following variable?<div><br></div><div>lines = File.readlines(""text.txt"")</div>"	Inside of lines you'll get an array of lines that are from the text file. You can then count them or do whatever you'd need to do inside of a word processor.
What is ARGV? How do you use it?	"Ruby automatically places any parameters that are appended to the command line when you launch your Ruby program into a special array called ARGV. For example, if you create a script (let's call it test.rb) and have the following in your script:<div><br></div><div>puts ARGV.join(""-"")</div><div><br></div><div>and then run your script in the command line:</div><div><br></div><div>ruby test.rb test 123</div><div><br></div><div>test and 123 are stored in the ARGV special array and your file will return:</div><div><br></div><div>test-123</div><div><br></div><div>If you wanted to dynamically run files with a script you created, you would do the normal:</div><div><br></div><div>lines = File.readlines()</div><div><br></div><div>but inside of the headlines argument, you would put the ARGV special array as follows:</div><div><br></div><div>lines = File.readlines(ARGV[0])</div>"
"Why won't the following work?<div><br></div><div>5 * ""pig""</div>"	"You would think it would but the computer (at least using Ruby) requires that you put it as:<div><br></div><div>""pig"" * 5</div>"
What will the following do two things do? Why?<div><br></div><div>'5 is my favorite number!'.to_i</div><div><br></div><div>'Who asked you about 5 or whatever?'.to_i</div>	5<div><br></div><div>0</div><div><br></div><div>They do this because to_i finds the first thing it doesn't understand and ignores everything after that. In the first example, it found 5 but then didn't understand the space and ignored everything afterward. In the second example, the first thing it saw (W) wasn't something it understood and so it ignored everything, including the 5.</div>
What do .center, .ljust and .rjust do? What's going on behind the scenes?	"They are methods of a string that return a new string with padding as specified. For example:<div><br></div><div>""my name"".center(4) #=> returns a new string that is at least 4 characters long. In this case nothing would be different.</div><div>""my name"".center(30) #=> returns a new string that is at 30 characters long with spacing being added on both sides to make the character the right length (adds to the right first). In this case we would get:</div><div>"" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;""</div><div>""my name"".ljust(12) #=> adds all the additional spaces to the right. In this case we would get:</div><div><br></div><div>""my name &nbsp; &nbsp; ""</div><div>""my name"".rjust(12) #=> adds all the additional spaces to the left. In this case we would get:</div><div>"" &nbsp; &nbsp; my_name""</div>"
How would you get the square root of 9 with Ruby?	9 ** 0.5
How do you get a random number in ruby? How could you specify which number range you'd like to use?	rand #=> Gives float greater than or equal to 0.0 and less than or equal to 1.0<div><br></div><div>rand(100) #=> Gives an integer greater than or equal to 0 and less than or equal to 99.</div>
What does srand do? How do you use it? How do you escape it?	srand remembers the sequences of random numbers and allows you to use that sequence over and over again. For example:<div><br></div><div>srand 1976</div><div>puts(rand(100))</div><div>puts(rand(100))<br></div><div>puts(rand(100))<br></div><div>puts(rand(100))<br></div><div><br></div><div># All of those return some number so if you call srand again with the same parameter (1976) it will output the same result for the next four rand(100) puts statements.&nbsp;</div><div><br></div><div>You escape srand by calling srand with no parameters and it will go back to being a different number every time.</div>
What's a recommended way to write branching code and keep track of your thoughts?	"First, write the entire if/elsif/else statements and the conditions:<div><br></div><div>if fruit == ""apple""</div><div>elsif fruit == ""banana""</div><div>else</div><div>end</div><div><br></div><div>Then write in the comments for what should be executed:</div><div><br></div><div>if fruit == ""apple""</div><div>&nbsp; &nbsp;# say something about apples</div><div>elsif fruit == ""banana""</div><div>&nbsp; &nbsp;# say something about bananas</div><div>else</div><div>&nbsp; &nbsp;# say something about not apples or bananas</div><div>end</div><div><br></div><div>The fill in the code. Supposedly, that makes it easier to avoid bugs.</div><div><br></div>"
What will the following be?<div><br></div><div>flavor = 'vanilla'</div><div>my_arr = [89.9, flavor, [true, false]]</div><div><br></div><div>flavor = 'chocolate'</div><div>puts my_arr</div>	While you would think that my_arr now contains chocolate, it doesn't. The array never stores any variables but rather the thing the variable refers to. So in this case, the array would still contain 89.9, 'vanilla', and the array [true, false] because it originally referred to vanilla.
What will the following two things do?<div><br></div><div>puts [1,2,3,4]</div><div>puts [1,2,3,4].to_s</div>	#=> 1<div>#=> 2</div><div>#=> 3</div><div>#=> 4</div><div>#=>1234</div>
What will the following do?<div><br></div><div>my_arr = [3,4,5,6,7,8]</div><div>my_arr.drop(3) #=> what does this return?</div><div>my_arr #=> what is the value of my_arr?</div>	It will drop the first x number of elements from the array. This method does not affect the original array.
"What's a synonym for ""extending a Ruby class""?"	monkey-patching
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">h1 <span class=""pl-k"" style=""box-sizing: border-box;color: rgb(167, 29, 93)"">=</span> {<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:a</span> => <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">'</span>apple<span class=""pl-pds"" style=""box-sizing: border-box;"">'</span></span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:b</span> => <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">'</span>bat<span class=""pl-pds"" style=""box-sizing: border-box;"">'</span></span>} h2 <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> {<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:b</span> => <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">'</span>bravo<span class=""pl-pds"" style=""box-sizing: border-box;"">'</span></span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:c</span> => <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">'</span>charlie<span class=""pl-pds"" style=""box-sizing: border-box;"">'</span></span>}  h1.merge(h2)</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">#What does the above return?</pre>"	"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""> <span class=""pl-c"" style=""box-sizing: border-box;color: rgb(150, 152, 150)""># => {:a => 'apple', :b => 'bravo', :c => 'charlie'}</span></pre>"
What does the fdiv method do?	It's like dividing by a float. Except for the fact that you give it an integer as it's parameter:<div><br></div><div>345.fdiv(345) #=>1.0</div>
What does each_byte do?	"It basically converts strings to the number equivalent. For example:<div><br></div><div>""hello"".each_byte {|byte| puts byte }</div><div><br></div><div># 104</div><div># 101</div><div># 108</div><div># 108</div><div># 111</div>"
Write a setter and a getter method for the following class. Then say what you should use instead:<div><br></div><div>class Cat</div><div>&nbsp; &nbsp;def initialize(name, age)</div><div>&nbsp; &nbsp; &nbsp; @name = name</div><div>&nbsp; &nbsp; &nbsp; @age = age</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;#getter method for name</div><div><br></div><div>&nbsp; &nbsp;#setter method for age</div><div><br></div><div><br></div><div>end</div>	<div><div>class Cat</div><div>&nbsp; &nbsp;def initialize(name, age)</div><div>&nbsp; &nbsp; &nbsp; @name = name</div><div>&nbsp; &nbsp; &nbsp; @age = age</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;#getter method for name</div><div>&nbsp; &nbsp;def name</div><div>&nbsp; &nbsp; &nbsp; @name</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;#setter method for age</div><div>&nbsp; &nbsp;def age=(age)</div><div>&nbsp; &nbsp; &nbsp; @age = age</div><div>&nbsp; &nbsp;end</div><div><br></div><div>end</div></div><div><br></div><div>**Because this is so common in Ruby, we're given shortcuts:</div><div><br></div><div>attr_writer :age, :name #shortcut setter method</div><div>attr_reader :age, :name #shortcut getter method</div><div>attr_accessor :age, :name #shortcut setter and getter method</div>
"Describe what's happening in each of following scenarios:<div><br></div><div><div class=""highlight highlight-source-ruby"" style=""box-sizing: border-box; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px;""><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">class</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">Cat</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">attr_accessor</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:age</span>, <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:location</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">age_on_year</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># works</span>     <span class=""pl-smi"" style=""box-sizing: border-box;"">@age</span> <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># won't change age</span>     age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># works again</span>     <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">+</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><div><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);""><br></span></div></div></div>"	In the:<div><br></div><div>@age = age + 1</div><div><br></div><div>portion, we are calling the getter method by using age, adding 1 to that, and returning that new value to the instance variable's age. In the:</div><div><br></div><div>age = age + 1</div><div><br></div><div>portion, we are essentially creating a new variable age and then assigning that variable to the instance variable's age + 1. It doesn't work how we would like it to. In the:</div><div><br></div><div>self.age = age + 1</div><div><br></div><div>portion, @age and self.age are the same in this case so it works how the first one worked.</div>
"What's wrong with the following?<br><div><br></div><div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>def initialize(name, age, food)</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@name = name,</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@age = age,</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@food = food</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>end</div></div>"	You can't have commas here. It screws things up.&nbsp;
What's the difference between a class method, a class/factory method, and an instance method? How are they used? How are they represented in documentation (think show-doc...)?	"<div>class Dog</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>attr_accessor :name, :age, :food</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>def initialize(name, age, food)</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@name = name</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@age = age</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>@food = food</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>end</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>def say_name</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>""My name is #{@name}""</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>end</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span># This is an example of an instance method.</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>def self.random_dog(name, max_age, food)</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>Dog.new(</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                        </span>name,</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                        </span>(max_age * rand),</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                        </span>food</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                        </span>)</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>end</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span># This is a class method and a factory method. It is known as a factory method because it is creating a new instance.</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>def self.random_name</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>names = [""Fido"", ""Kairo"", ""Piper"", ""A"", ""B"", ""C"", ""D""]</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">                </span>names.sample</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span>end</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span># This is a class method as well (notice the self) however it is not a factory method because it is not creating new instances.</div><div><span class=""Apple-tab-span"" style=""white-space:pre"">        </span></div><div>end</div><div><br></div><div>kairo = Dog.new(""Kairo"", 3, ""Jerky"")</div><div>kairo.say_name</div><div><br></div><div>random_dog = Dog.random_dog(""Crazy"", 65, ""Beef"")</div><div>Dog.random_name</div><div><br></div><div># How would you show what is a class method and what is an instance method?</div><div># Class methods:</div><div># Dog::random_dog</div><div># Instance methods:</div><div># Dog#say_name</div>"
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">class</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">Cat</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">meow</span>     puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Meow<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">hiss</span>     puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Hiss<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">throw_fit</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># meow and hiss a lot</span>     <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.meow     <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.hiss     <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.meow   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span> <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d"">What's another way you can write that?</font></pre>"	"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">class</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">Cat</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">meow</span>     puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Meow<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">hiss</span>     puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Hiss<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">throw_fit</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># meow and hiss a lot</span>     meow     hiss     meow   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span> <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><pre style=""box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d"" style=""font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px;""><br></font></pre><pre style=""box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d"" style=""font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px;""># Ruby lets the user drop (or elide) the self. part when calling a method.</font></pre><pre style=""box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d"" style=""font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px;""># This works unless you are using a setter method.</font></pre>"
You can call instance methods from other instance methods. How do you call class methods from other class methods?	"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">class</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">Dog</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">self.dog_years_to_human_years</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">age</span>)     age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">/</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">7.0</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">self.human_years_to_dog_years</span>(<span class=""pl-smi"" style=""box-sizing: border-box;"">age</span>)     age <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">*</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">7.0</span>   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span>    <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">def</span> <span class=""pl-en"" style=""box-sizing: border-box; color: rgb(121, 93, 163);"">self.human_to_dog_ratios</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># get the equivalent of one dog or human year in terms of the</span>     <span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># other</span>     dog_to_human_ratio <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.dog_years_to_human_years(<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>)     human_to_dog_ratio <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> <span class=""pl-v"" style=""box-sizing: border-box; color: rgb(237, 106, 67);"">self</span>.human_years_to_dog_years(<span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">1</span>)      { <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:dog_ratio</span> => dog_to_human_ratio,       <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">:human_ratio</span> => human_to_dog_ratio }   <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span> <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">end</span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d""># Pretty much the same way. Remember here that the self is optional (it refers to the</font></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""><font color=""#a71d5d""># calling object) but it can be left off and still work just fine.</font></pre>"
How do Javascript and Ruby differ in the way they view scope?	If I remember right, if Javascript couldn't find a variable defined in your function, it would look outside of itself into the bigger scope and see if it can find the variable. With Ruby on the other hand, scope is more limited. If a Ruby method can't find a variable, it won't look outside of the method. Variables in the global scope can't see methods in the method's scope and vice-versa (unless you use all caps for the variable name).
<div>#Where is the self.fahrenheit getting its parameter?</div><div><br></div><div>class Temperature</div><div>&nbsp; &nbsp;def initialize(options)</div><div>&nbsp; &nbsp; if options[:f]</div><div>&nbsp; &nbsp; &nbsp; self.fahrenheit = options[:f]</div><div>&nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; self.celsius = options[:c]</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div><div><br></div><div>&nbsp; def fahrenheit=(temp)</div><div>&nbsp; &nbsp; @temperature = self.class.ftoc(temp)</div><div>&nbsp; end</div><div><br></div><div>&nbsp; def celsius=(temp)</div><div>&nbsp; &nbsp; @temperature = temp</div><div>&nbsp; end</div><div>end</div>	It's getting it from the value we're setting the called method equal to. This is really important to note for the future...I would bet we'll spend some time learning this later in the App Academy program.
What's a good way to write short, concise code?	Make sure to finish an entire method before moving on to the next method. You can even use methods you haven't created yet and then move on to creating those methods after that is done.
What is a data clump?	A data clump is a situation in which you are consistently passing in two or more arguments together. A good example would be a start date and an end date for an orders report. Since you are always passing them in together, it would be a better idea to make an object called orders_range that takes a start date and an end date and then pass the orders_range object into the previously used methods.
What does the following do? Why would you use it?<div><br /></div><div>def includes_date?(date)</div><div>&nbsp; &nbsp;(start_date..end_date).cover?(date)</div><div>end</div>	This is a slight variation of the include? method. It uses the Comparable module to reason as to whether or not a value would fit between the first value of the compared range and the last value. In the following case, the difference is really clear:<div><br /></div><div>(1..1_000_000).cover?(999_999) #=> this about four times faster than include</div><div><br /></div><div>(1..1_000_000).include?(999_999) #=> this is slower because it instantiates every object</div>
What's the first rule when you encounter a bug?	"First, read the error. Don't jump into the code until you've read the error message which usually has:<div><br></div><div><ul style=""box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px;""><li style=""box-sizing: border-box;"">Error type</li><li style=""box-sizing: border-box; margin-top: 0.25em;"">Error message</li><li style=""box-sizing: border-box; margin-top: 0.25em;"">Line number on which the error occurred</li><li style=""box-sizing: border-box; margin-top: 0.25em;"">Chain of methods that were called leading up to it (referred to as the&nbsp;<span style=""box-sizing: border-box; font-weight: 600;"">stack trace</span>)</li></ul></div>"
What is the bug with Ruby 2.1 that you need to type something twice to get past?	There is a bug with Ruby 2.1 where you need to type 'step' twice to get into a method when using byebug.
What should method names describe?	They should describe EVERYTHING a method does. If the name is too long, that's a sign that the method does too much and that you need to break it up into more manageable parts.
What should you name methods that have no side-effects and just return a value?	Whatever the return value is. For example, if a method returns a square root, call it:<div><br></div><div>def square_root (num)</div><div>&nbsp; &nbsp;# obviously code would go here</div><div>end</div>
How should you name a method that has side effects?	verb + noun. For example, for a function that prints a document:<div><br></div><div>def print_document</div><div>end</div>
"What does the f represent in the following:<div><br></div><div>File.open(""text.txt"") do |f|</div><div>&nbsp; &nbsp;# something here</div><div>end</div>"	It represent the file object that is passed in.
What would you do if you want to do something with each line of a file?	"File.foreach(""text.txt"") do |line|<div>&nbsp; &nbsp;# do something to each line</div><div>end</div>"
What if you want a file to be read into one long string?	"contents = File.read(""text.txt"")"
How do you create a new file with Ruby?	File.new(filename)
"What does the following do?<div><br></div><div>File.open(""cool-things.txt"", ""w"") do |f|</div><div>&nbsp; &nbsp;f.puts ""Race cars""</div><div>&nbsp; &nbsp;f.puts ""Lasers""</div><div>&nbsp; &nbsp;f.puts ""Aeroplanes""</div><div>end</div>"	"It opens a file and then writes to it (creates lines with the puts statement). Of note here is that the original file is overwritten or a new file is created if the name doesn't exist. If you're wanting to append to another file, you'll need use ""a"" instead of ""w"" in the above syntax.<div><br></div><div>So if we actually opened the file and looked at it, it would be like this:</div><div><br></div><div>1 Race cars</div><div>2 Lasers</div><div>3 Aeroplanes</div>"
"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);"">f <span class=""pl-k"" style=""box-sizing: border-box; color: rgb(167, 29, 93);"">=</span> <span class=""pl-c1"" style=""box-sizing: border-box; color: rgb(0, 134, 179);"">File</span>.open(<span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>cool-things.txt<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>, <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>w<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span>) f.puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Race cars<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span> f.puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Lasers<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span> f.puts <span class=""pl-s"" style=""box-sizing: border-box; color: rgb(24, 54, 145);""><span class=""pl-pds"" style=""box-sizing: border-box;"">""</span>Aeroplanes<span class=""pl-pds"" style=""box-sizing: border-box;"">""</span></span></pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""># how would you close a file if a block is not included? (This is important so that</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;"">the data is written to the disk</pre><pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal;""></pre>"	"<pre style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; margin-top: 0px; margin-bottom: 0px; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(247, 247, 247); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; color: rgb(51, 51, 51);""><span class=""pl-c"" style=""box-sizing: border-box; color: rgb(150, 152, 150);""># will make sure output is ""synced"" to disk and properly saved</span> f.close</pre><div><br></div>"
What are the standard input and output global variables in Ruby? What do they do?	"<p style=""box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px;"">In Ruby, you can access standard input and output through the global variables&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">$stdout</code>&nbsp;and&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">$stdin</code>. These variables just hold typical&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">File</code>&nbsp;objects. In particular,&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">Kernel#gets</code>&nbsp;and&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">Kernel#puts</code>&nbsp;just call&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">$stdin.gets</code>&nbsp;and&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">$stdout.puts</code>.</p><p style=""box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px;"">Remembering that&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">$stdin</code>&nbsp;is a&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">File</code>&nbsp;object and that&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">File</code>&nbsp;objects include&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">Enumerable</code>&nbsp;you'll realize that you can&nbsp;<code style=""box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.600000381469727px; padding: 0.2em 0px; margin: 0px; background-color: rgba(0, 0, 0, 0.0392157); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;"">#each</code>&nbsp;over input.</p>"
"What does the puts do in the following code?<div><br></div><div>lines = [""1"", ""2"", ""3"", ""4"", ""5""]<br><div><div><br></div><div>File.open(""some_file_that_does_not_exist.txt"", ""w"") do |f|</div></div><div>&nbsp; &nbsp;lines.each { |line| f.puts line }</div><div>end</div><div>&nbsp; &nbsp;</div></div>"	"It creates a new file and then writes the lines array into the new file. So they new file would be a text file with the following lines:<div><br></div><div>""1""</div><div>""2""</div><div>""3""</div><div>""4""</div><div>""5""</div>"
How would you quickly create an array of three arrays, all with three indexes that are nil?	Array.new(3) { Array.new(3) }
What do the special methods:<div><br></div><div>[ ]</div><div><br></div><div>and:</div><div><br></div><div>[ ] =</div><div><br></div><div>do?</div>	I've only seen them used in Class definitions. Basically, it gives you the ability to get and to set things the same way you do with hashes. For instance let's say we have the following class:<div><br></div><div>class Board</div><div><br></div><div>&nbsp; &nbsp;def self.set_up_board</div><div>&nbsp; &nbsp; &nbsp; Array.new(3) { Array.new(3) }</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def initialize(grid=Board.set_up_board)</div><div>&nbsp; &nbsp; &nbsp; @grid = grid</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def [](pos)</div><div>&nbsp; &nbsp; &nbsp; row, column = pos</div><div>&nbsp; &nbsp; &nbsp; grid[row][column]</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def []=(pos, mark)</div><div>&nbsp; &nbsp; &nbsp; row, column = pos</div><div>&nbsp; &nbsp; &nbsp; grid[row][column] = mark</div><div>&nbsp; &nbsp;end</div><div><br></div><div>end</div><div><br></div><div><br></div><div># then from outside of the class, we would be able to do the following:</div><div><br></div><div>my_board = Board.new</div><div><br></div><div>top_left_position = [0,0]</div><div><br></div><div>my_board[top_left_position] #=> This would return nil because that's the value at the top left position.</div><div><br></div><div>my_board[top_left_position] = 5 #=> This changes the value at the top left position.</div>
In what places can you define Instance Variables?	You can define them in the initialize function. You can also define them with a setter method (even if the instance variable doesn't show up in the initialize function. As well, if you add in attr_accessor :instance_variable_name to the top of your file, you can set them anywhere by typing instance.instance_variable_name and setting that equal to a value.
Okay this next thing is cool. Let's say you have a game board class like you have below:<div><br></div><div>class RiskBoard</div><div>&nbsp; &nbsp;attr_accessor :board</div><div><br></div><div>&nbsp; &nbsp;def initialize(board)</div><div>&nbsp; &nbsp; &nbsp; @board = board</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div># and let's say you have another class called player that keeps track of the board.</div><div><br></div><div>class Player</div><div>&nbsp; &nbsp;attr_reader :risk_board</div><div><br></div><div>&nbsp; &nbsp;def initialize(color)</div><div>&nbsp; &nbsp; &nbsp; @color = color</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def display_board(risk_board)</div><div>&nbsp; &nbsp; &nbsp; @risk_board = risk_board</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br></div><div># now let's create a risk board object and a player object.</div><div><br></div><div>new_game = RiskBoard.new([[0],[0],[0],[0]])</div><div>player_one = Player.new(:blue)</div><div><br></div><div># now let's connect the two with the display_board method</div><div><br></div><div>player_one.display_board(new_game)</div><div><br></div><div># If we then do the following:</div><div><br></div><div>new_game.board = [[1],[1],[1],[1]]</div><div><br></div><div># What would we have to do to update the player_one's game board?</div>	Absolutely nothing. The reference to that object is stored inside of the player class as the risk_board instance variable. Any updates to the variable will be automatically reflected in other classes that hold that variable.
What is an options hash? What is it used for? Give an example of a real application.	"An options hash is used so that you don't need to remember the order of certain parameters as well as to have certain parameters as optional. Here's an example:<div><br></div><div>class Person</div><div>&nbsp; &nbsp;</div><div>&nbsp; &nbsp;def initialize(options = {})</div><div>&nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; default = {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name: ""Chase"",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;age: 24,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;location: ""Sandy""</div><div>&nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; options = default.merge(options)</div><div><br></div><div>&nbsp; &nbsp; &nbsp; @name = options[:name]</div><div>&nbsp; &nbsp; &nbsp; @age = options[:age]</div><div>&nbsp; &nbsp; &nbsp; @location = options[:location]</div><div>&nbsp; &nbsp;end</div><div><br></div><div>end</div><div><br></div><div># There are a few really cool things that are happening here. First, we can pass in any values in any order. If we pass in values that represent name, age, or location, those values will become our instance variable values. If we don't pass any of those in, those instance variables will automatically be assigned to the default values. The only other thing that might be valuable is to know that you can pass in an options hash or the key and value pairs (only works with symbols) upon creating a new instance. For example:</div><div><br></div><div>dad = Person.new(name: ""John"", age: 50, location: ""Sandy"")</div><div><br></div><div># As well, we could have required arguments with an options hash to end. If we had that (assuming that our initialize method was set up for it) we could do the following:</div><div><br></div><div>dad = Person.new(""John"", 50, mammal: true, is_person: true)</div>"
"How would you see if the following string begins with ""str""?"	"""string"".start_with?(""str"")"
How can you use the method missing method to dynamically create methods?	"Method missing usually tells you if you're missing a method (i.e. called a method that was not defined). However, you can also use it to dynamically define functions. Here's an example of how you might do that:<div><br></div><div>class Cat</div><div><br></div><div>&nbsp; &nbsp;def initialize(name)</div><div>&nbsp; &nbsp; &nbsp; @name = name</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def say(something)</div><div>&nbsp; &nbsp; &nbsp; p something</div><div>&nbsp; &nbsp;end</div><div><br></div><div>&nbsp; &nbsp;def method_missing(method_name)</div><div>&nbsp; &nbsp; &nbsp; method_name = method_name.to_s</div><div>&nbsp; &nbsp; &nbsp; if method_name.start_with?(""say_"")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;text = method_name[(""say_"".length)..-1]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;say(text)</div><div>&nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super # this ensures there is an error raised if the method is not defined</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# and if it doesn't start with say</div><div>&nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp;end</div><div><br></div><div>end</div><div><br></div><div><br></div><div># now I could do something like this:</div><div><br></div><div>my_cat = Cat.new</div><div>my_cat.say_I_am_a_cat #=> shows ""I_am_a_cat"" to the console.</div>"
What's another way to write:<div><br></div><div>gets.chomp.to_i</div>	Integer(gets.chomp)
How would you use begin, rescue, else, and ensure?	"<pre class=""lang-rb prettyprint prettyprinted"" style=""margin-top: 0px; padding: 5px; border: 0px; font-size: 13px; width: auto; max-height: 600px; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; background-color: rgb(239, 240, 241); color: rgb(57, 51, 24); word-wrap: normal;""><code style=""margin: 0px; padding: 0px; border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; white-space: inherit;""><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">begin</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);"">   </span><span class=""com"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(133, 140, 147);""># something which might raise an exception</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">rescue</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""typ"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(43, 145, 175);"">SomeExceptionClass</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""pun"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);"">=></span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> some_variable   </span><span class=""com"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(133, 140, 147);""># code that deals with some exception</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">rescue</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""typ"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(43, 145, 175);"">SomeOtherException</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""pun"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);"">=></span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> some_other_variable   </span><span class=""com"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(133, 140, 147);""># code that deals with some other exception</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">else</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);"">   </span><span class=""com"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(133, 140, 147);""># code that runs only if *no* exception was raised</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">ensure</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);"">   </span><span class=""com"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(133, 140, 147);""># ensure that this code always runs, no matter what</span><span class=""pln"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(48, 51, 54);""> </span><span class=""kwd"" style=""margin: 0px; padding: 0px; border: 0px; color: rgb(16, 16, 148);"">end</span></code></pre>"
"What's the easiest way to get rid of the newline character in this array?<div><br></div><div>my_words = [""hello\n"", ""goodbye\n"", ""hola\n""]</div>"	my_words.map!(&amp;:chomp)
"<div>What does ArgumentError do and what does the retry keyword do?</div><div><br></div><div>def pick_secret_word</div><div>&nbsp; &nbsp; puts ""Think of a secret word; how long is it?""</div><div><br></div><div>&nbsp; &nbsp; begin</div><div>&nbsp; &nbsp; &nbsp; Integer(gets.chomp)</div><div>&nbsp; &nbsp; rescue ArgumentError</div><div>&nbsp; &nbsp; &nbsp; puts ""Enter a valid length!""</div><div>&nbsp; &nbsp; &nbsp; retry</div><div>&nbsp; &nbsp; end</div><div>end</div>"	"ArgumentError is a Ruby class that is raised if there is an argument error. Let's say for example we type in the letter 'j' when asked to pick the secret word length. It will raise an argument error because the expected argument here is a number string that can that be converted to an integer using Integer.<div><br></div><div>The rescue block will get passed any errors and if it is an ArgumentError, it will say ""Enter a valid length!"" and then restart at the begin block when the retry keyword is reached.</div>"
What does the following return?<div><br></div><div>[nil] * 5</div>	[nil,nil,nil,nil,nil]
What's a shorter way to write the following and check if every position has a truthy value?<div><br></div><div>my_arr = [1,2,3,4,5,6,nil]</div><div><br></div><div>my_arr.all?{|num| num }</div>	my_arr.all?
What are some of the syntax difference from Ruby to Javascript?	You need to end lines with a semicolon. Make variables with var variableName. Use camel case instead of underscores.&nbsp;
What can you do to find all prime numbers under 50000?	require 'prime' # This brings in the prime class<div><br /></div><div>primes = []</div><div>Prime.each(50000){|prime| primes << prime }</div>
How would you select the first 10 prime numbers?	require 'prime'<div><br /></div><div>Prime.first 5</div><div><br /></div><div># [2,3,5,7,11]</div>
How would you use the prime class to determine if a number is a prime?	require 'prime'<div><br /></div><div>Prime.prime?(some_num)</div><div><br /></div><div># returns true of false</div>
"How would you get the following?<div><br /></div><div>[""hello"", ""hello"", ""hello""]</div>"	"Array.new(3) {""hello""}"
How would you get both initial variables right from the get go with the following?<div><br /></div><div>[[1,2],[3,4]].map.with_index{ &nbsp; &nbsp; ? &nbsp; &nbsp; &nbsp;}</div>	[[1,2],[3,4].map.with_index{|(first, second), index| #do something here }
How would you sort the following array by the last value in each sub-array?<div><br /></div><div>[[1,2,3],[1,5,2],[2,2,5]]</div><div><br /></div><div># want to get the following<br /><br /></div><div>[[1,5,2],[1,2,3], [2,2,5]]</div>	[[1,2,3],[1,5,2],[2,2,5]].sort_by(&amp;:last)
How can you use the each_with_object iterator in Ruby?	You would use it like this:<div><br /></div><div>numbers = (1..10).each_with_object([]){|num,obj| obj << num }</div><div><br /></div><div># numbers = [1,2,3,4,5,6,7,8,9,10]</div>
What does divmod do to the following?<div><br /></div><div>20.divmod(4)</div>	It returns:<div><br /></div><div>[5,0]</div><div><br /></div><div>The first index represents the amount of times that the value can go into the number it is called on. The second represents what is left over.</div>
How would you use the .lines method on a string?	"string.lines(some_separator)<div><br /></div><div>Basically it works the same as .split(separator) with the one difference being it won't get rid of the separator in the outputed array. For example:</div><div><br /></div><div>""my name"".lines("" "")</div><div><br /></div><div>will return:</div><div><br /></div><div>[""my "", ""name""]</div>"
What is the RVM?	The RVM is the Ruby Version Manager. You use it to install the latest version of Ruby. To install the latest version of Ruby you do:<div><br /></div><div>rvm install ruby-version number</div><div><br /></div><div>Example:</div><div><br /></div><div>rvm install ruby-2.3.3</div>
What does the each_slice method do?	Basically it allows you to cut a big array into smaller arrays based on the value you pass it. For example, we could do:<div><br /></div><div>(1..10).each_slice(3).to_a</div><div><br /></div><div># return [[1,2,3],[4,5,6],[7,8,9][10]]</div><div><br /></div><div>**Also of note here is that it would work on a range (as shown) and on an array.</div>
What's the shortcut in your text editor to add the following to the top of your file?<div><br /></div><div>#!/usr/bin/env ruby -wKU</div>	rb<div><br /></div><div>**Only works if you're inside a ruby file.</div>
What is the following variable? How do you use it?<div><br /></div><div>global_variables</div>	"It's an array collection of all the global_variables. To narrow down the list if you know what you're looking for you would type:<div><br /></div><div>global_variables.grep(/some_name/)</div><div><br /></div><div># that returns an array of global_variables matching your regular expression. If you want the first item you'd go:</div><div><br /></div><div>a = global_variables.grep(/some_name/).first</div><div><br /></div><div>You could then evaluate that for some reason(maybe only with the test case I was working with):</div><div><br /></div><div>eval(""#{a}"")</div>"
What's a quick way to declare a few variables that don't have assigned values in a method?<div><br /></div>	def something(val)<div>&nbsp; &nbsp;x = y = z = a = val<br /><div>end</div></div><div><br /></div><div>All these are set to the val variable but they can be changed and it won't affect the other variables. Basically it's just a shortcut to change a bunch of things.</div>
Where do you find Ruby gems?	rubygems.org
If the following is our code:<div><br /></div><div>h1.my_merge(h3) { |key, oldval, newval| newval - oldval }</div><div><br /></div><div>How many arguments will the prc take when we call it in our my_merge function?</div>	It will take three because that is how many appear in the pipes inside of our block.
What are higher order functions? (same definition applies to Javascript as well)	They are functions that accept a function as an argument or functions that return a function as a return value.
What is a partial function application?	It is calling a function with some number of arguments in order to get a function back that will take that many less arguments.
What is currying?	It is taking a function that takes n arguments and splitting it into n functions that take one argument.
What would the partial application of the following function return if we passed in two arguments? If we curried this function?<div><br /></div><div>proc { |x, y, z| x + y + z }</div>	<div>Partial Application:</div><div><br /></div>proc { |x, y| proc { |z| x + y + z } }<div><br /></div><div>Currying:</div><div><br /></div><div>proc { |x| proc |y| proc { |z| x + y + z } } }&nbsp;</div>
What does the .curry method allow us to do?	It lets us call a Proc and fixate one of the values to that Proc. Basically, it gives us back the same Proc that we started with but with one of the values fixed. For example:<div><br /></div><div>apply_math = Proc.new do |fn, a, b|</div><div>&nbsp; &nbsp;a.send(fn, b)</div><div>end</div><div><br /></div><div>add = apply_math.curry.(:+)</div><div><br /></div><div># Here we have created a new Proc with the plus operator fixated to this Proc. So now if we go:</div><div><br /></div><div>add.call(1,2)</div><div><br /></div><div># We will get 3 because the :+ operator is already set as the fn part of our Proc and the add.call(1,2) makes 1 and 2 the a and b parameters of our Proc.</div><div><br /></div><div># We could even go a step further and and create an increment by one Proc like so:</div><div><br /></div><div>increment_by_one = add.curry.(1)</div><div>increment_by_one.call(3) # returns 4</div>
What does a Proc do to multiple arguments? What about too little arguments?<div><br /></div><div>Proc.new {|a,b| a + b }.call(1,2,3)</div><div><br /></div><div>Proc.new{|a,b| a + b }.call(1)</div>	In the first case, it will run just fine and ignore the additional argument. In the second case, it will assign b as nil and will raise an error when it tries to add 1 plus nil.
Why doesn't the following work?<div><br /></div><div>add_one = proc {|a,b| a + b + 1 }</div><div>add_one.call([1,2])</div>	Trick question, it actually does work. It works on procs but it does not work on lambdas (they're more restrictive)
How can you find out information about each proc's arguments (not the number of arguments but whether or not each argument is required and what that argument's symbol is)?	<div>add_one = proc{|a,b| a + b + 1 }</div><div>add_one.parameters</div><div><br /></div><div># [[:opt, :a], [:opt, :b]].</div><div><br /></div><div>Basically, this returns what the arguments are and if they are optional, required, or prefaced with a * meaning it will take the rest of what is available. See below for the options:</div><div><br /></div><div>[[:req, :x], [:opt, :y], [:rest, :other]]</div>
<div>What will the following return?</div><div><br /></div><div>add_one = proc{|a,b| a + b + 1 }</div><div>add_one.source_location</div>	"It returns the Ruby source filename as well as the line number containing the proc. When I tried this out on repl.it it returned:<div><br /></div><div>[""(repl)"", 1]</div>"
What is the ArgumentError? When is it raised?	It is raised when the passed arguments are wrong and there isn't a more specific Exception class.<div><br /></div><div>Examples:</div><div><br /></div><div>[1,2,3].first(4,5)</div><div>[1,2,3].first(-4)</div>
"<div>What's the fastest way to get the following?</div><div><br /></div><div>[""hello"", ""hello"", ""hello""]</div>"	"Array.new(3) { ""hello"" }"
"info = [""Chase"", 24]<div>info.at(0) #=> ""Chase""</div>"	
"How would you make it so there is an IndexError (default) or any other error raised when someone tries to access an index outside of an array?<div><br /></div><div>For example:</div><div><br /></div><div>arr = [""a"", ""b"", ""c""]</div><div># accessing the 5th index</div>"	"arr.fetch(5) #=> default IndexError<div><br /></div><div>or</div><div><br /></div><div>arr.fetch(5, ""No such index exists"")</div>"
What does the following return?<div><br /></div><div>[1,2,3,4,5].drop(3)</div>	The elements left in the array.<div><br /></div><div>[4,5]</div>
What does the following do?<div><br /></div><div>[1,2,3].insert(1, 'test')</div>	**This affect the original array. We would get:<div><br /></div><div>[1,'test', 2 , 3 ]</div><div><br /></div><div>It basically moves everything down.</div>
How could you iterate over every item of an array backwards?	[1,2,3].reverse_each do |num|<div>&nbsp; &nbsp;p num<br /><div>end</div></div><div><br /></div><div># 3</div><div># 2</div><div># 1</div>
What's the opposite of the select array method? How does it work?	reject<div><br /></div><div>It rejects the parts of the array that don't pass the block.</div>
How does the drop while method work?	It's an extension of the drop method but it drops as many things off the front of the array as pass the passed in block.
What is the optional pipe value when creating a new array?	It's the index:<div><br /></div><div>Array.new(3) { |i| i ** 2 }</div><div>#=> [0, 1, 4]</div>
What does the try_convert method do?	"It tries to convert the passed object into an array (if used with the Array class). If it can't convert it, it will output nil:<div><br /></div><div>Array.try_convert([1]) #=> [1]</div><div>Array.try_convert(""1"") #=> nil</div><div><br /></div><div>I guess this is used to test if something is an array.</div>"
How do you test for overlapping array values?	[1,2,3] &amp; [2,3,4] #=> [2,3]
What happens when you minus one array from another?	You get whatever was in the first array that wasn't in the second, repeated as many times as was repeated in the first array. For example:<div><br /></div><div>[1,1,2,2,3,3,4,5] - [1,2,4] #=> [3,3,5]</div>
"What will this do?<div><br /></div><div>[1,2] << ""c"" << ""d"" << [3,4]</div>"	"[1,2,""c"", ""d"", [3,4]]"
How would two arrays be equal?	If they contain the same number of elements and if each element is equal to the corresponding element in the other array.
"Let's say we have the following array:<div><br /></div><div>a = [""a"", ""b"", ""c"", ""d"", ""e"", ""f""]</div><div><br /></div><div>What will the following return?</div><div><br /></div><div>a[1,3]</div>"	"[""b"", ""c"", ""d""]<div><br /></div><div>It's basically slicing the array, starting at the first index specified and taking the amount specified at the second index.</div>"
What does the .assoc method do?	"It looks through an array where the objects in the array are also arrays. It then compares each inner array's first element with the passed in object to see if it's the same, and if it is it returns that array like so:<div><br /></div><div>s1 = [""colors"", ""red"", ""blue"", ""green""]</div><div>s2 = [""letters"", ""a"", ""b"", ""c""]</div><div>s3 = ""foo""</div><div><br /></div><div>a = [s1, s2, s3]</div><div>a.assoc(""letters"")</div><div><br /></div><div>#=> [""letters"", ""a"", ""b"", ""c""]</div>"
What does bsearch do in Ruby?	"It starts at the middle element of an array and determines if it should go right or left to find the answer you're looking for. It keeps doing that (dividing the remaining possible answers in half) until it finds a definitive yes or a definitive no.<div><br /></div><div>**Of note here is that the block has to be structured like the following:</div><div><br /></div><div>[1,2,3,4].bsearch { |x| x >= 2 }</div><div><br /></div><div>** I guess they've set it up that way. You have to use greater than or equal to with the number on the ""less than"" side of things.</div>"
How do you use bsearch minimum mode?	**This has to be done on an array that has already been sorted (don't sort it yourself because this defeats the efficiency gained by using this method).<div><br /></div><div>Minimum Mode:<br /><div><br /></div><div>ary = [0,4,7,10,12]</div><div>ary.bsearch{|x| x >= 4 } #=> 4</div></div><div><br /></div><div>Also, while I don't totally understand why quite yet, the greater than or equal to portion is important.</div>
How would you clear all elements from the an array?	"a = [""a"", ""b"", ""c"", ""d"", ""e""]<div>a.clear</div><div>p a #=> [ ]</div>"
What is an Enumerator?	Something that can be looped over (the class that encapsulates these type of objects)
What does the .concat method do that the + method does not with arrays?	It changes the original array. Basically, this:<div><br /></div><div>my_arr = [1,2,3]</div><div>my_arr += [4,5]</div><div><br /></div><div>is the same as:</div><div><br /></div><div>my_arr = [1,2,3]</div><div>my_arr.concat([4,5])</div>
What does adding a block to the Ruby count method do?	It counts how many objects in the array pass the given block.
"What does the following do?<div><br /></div><div>a = [""a"", ""b"", ""c""]</div><div>a.cycle(2) { |x| puts x }</div>"	It cycles through through entire array twice doing whatever the passed block indicates.
"What do the following do? (Assume each one is starting from the original array)<div><br /></div><div>a = [""a"", ""b"", ""c"", ""d""]</div><div>a.fill(""x"")</div><div>a.fill(""z"", 2, 2)</div><div>a.fill(""y"", 0..1)</div><div>a.fill( |i| i*i )</div>"	"#=> [""x"", ""x"", ""x"", ""x""]<div><div>#=> [""x"", ""x"", ""z"", ""z""]</div><div>#=> [""y"", ""y"", ""z"", ""z""]</div><div>#=> [0,1,8,27]</div></div>"
What does the optional argument do for the .flatten method?	a = [1, 2, [3, [4,5] ] ]<div>a.flatten(1) #=> [1, 2, 3, [4, 5] ]</div><div><br /></div><div>**It says the amount of levels to flatten.</div>
What do .freeze and .frozen? do?	Freeze makes a value a true constant that can't be changed and frozen? tells you if that value is currently frozen?
"What does the following do?<div><br /></div><div>a = [""a"", ""b"", ""c"", ""d""]</div><div>a.replace([1,2,3])</div>"	It replaces everything in a with everything passed to the replace method.
"What happens here?<div><br /></div><div>a = [""a"", ""b"", ""c"", ""d""]</div><div>a.insert(-2,1,2,3)</div>"	"a = [""a"", ""b"", ""c"", 1, 2, 3, ""d""]"
What's the difference between a permutation and a combination?	Permutations include order while combinations do no. For example, the two number combinations for the following array:<div><br /></div><div>[1,2]</div><div><br /></div><div>is just:</div><div><br /></div><div>[1,2]</div><div><br /></div><div>while the permutations are:</div><div><br /></div><div>[1,2], [2,1]</div>
"What does the following do?<div><br /></div><div>a = [ [1, ""one""], [2, ""two""], [3, ""three""] ]</div><div>a.rassoc(""two"")</div>"	"#=>[2,""two""]<div><br /></div><div>Loops through an array or arrays and returns the first inner (or contained) array where the second value in the array matches the passed in value.</div>"
What does the following return?<div><br /></div><div>a = [1,2,3]</div><div>a.repeated_combination(2).to_a</div>	It returns an array of arrays where each inner (or contained) array is one possible combination. The only difference this has with combination is that number can be repeated. For example:<div><br /></div><div>a.repeated_combination(2).to_a</div><div><br /></div><div>#=>one of the inner arrays would be [1,1]</div>
What Ruby method would you use to get all permutations of size 2 where you can use each number in the following array more than once? What about the same but for combinations?<div><br /></div><div>[1,2,3]</div>	"[1,2,3].repeated_permutation(2).to_a<div><br /></div><div>or you can even include a block like so:</div><div><br /></div><div>[1,2,3].repeated_combination(2) { |comb| puts ""This comb is #{comb}"" }</div>"
"What does the following return?<div><br /></div><div>a = [""a"", ""b"", ""b"", ""b"", ""c""]</div><div>a.rindex(""b"")</div>"	It returns the last index where there is a match.
What's the difference between drop and take?	The both do something with the beginning of an array but take returns the items that were taken off of the array while drop returns the items that are left in the array.
What does this do?<div><br /></div><div><div>a = [5,6,7]</div><div>a.take_while{|i| i > 5 }</div></div>	It takes the things off of the front of the array so long as they meet the requirement. Here it would do nothing because it only takes things off of the front.
What does the .to_h do?	It tries to convert an array to a hash. It can be used with an array of arrays where each inner array is a length of 2. It will then convert it to an hash of key value pairs.
What happens if you add a block to the .uniq method?	"You can filter a little further. For example:<div><br /></div><div>c = [ [ ""student"", ""sam""], [""student"", ""george""], [""teacher"", ""matz"" ] ]</div><div>c.uniq! {|s| s.first }</div>"
How would you get the values at multiple array indices at the same time?	"a = [""a"", ""b"", ""c"", ""d""]<div>a.values_at(1,2,4)</div><div>#=>[""a"", ""b"", ""d""]</div>"
What does .zip do to an array?	It combines the array it's called on with any and all arrays to give you a final array of arrays where the amount of inner arrays is equal to the array length that calls the method. Simply:<div><br /></div><div>a = [4,5,6]</div><div>[1,2,3].zip(a)</div><div>#=>[[1,4],[2,5],[3,6]]</div>
What is the BasicObject?	It is the parent of all other objects in Ruby (including Object). You can use it to create a class that is independent of everything else:<div><br /></div><div>class MyObjectSystem < BasicObject</div><div>end</div>
What does the send method do?	"It sends the arguments passed in to the method that the passed in symbol represents. For example:<div><br /></div><div>def say_hello_to(name)</div><div>&nbsp; &nbsp;p ""Hello #{name}""</div><div>end</div><div><br /></div><div>send(:say_hello_to, ""me"")</div><div>#=> Hello me</div>"
"What does the following do?<div><br /></div><div>def get_binding(param)</div><div>&nbsp; &nbsp;return binding</div><div>end</div><div>b = get_binding(""hello"")</div>"	"Binding takes a snapshot of the local scope and saves it. We can then pass in this snapshot to the eval method as the second parameter to get a certain variable's value in the current scope:<div><br /></div><div>eval(""param"", b) #=> ""hello""</div><div><br /></div><div>**Of note is that b is now a binding object and we have lots of methods we can use on it. Another way to write this is:</div><div><br /></div><div>b.eval(""param"")</div>"
What does the following do?<div><br /></div><div>def foo</div><div>&nbsp; &nbsp;a = 1</div><div>&nbsp; &nbsp;binding.local_variable_defined?(:a)</div><div>end</div><div><br /></div><div>foo</div>	It returns if there is a variable in the current scope. Also, you could have the method return the current binding and do something like this:<div><br /></div><div>def foo</div><div>&nbsp; &nbsp;a = 1</div><div>&nbsp; &nbsp;binding</div><div>end</div><div><br /></div><div>current_scope = foo</div><div>current_scope.local_variable_defined?(:a) #=> true</div>
How do you find the value of a current variable if you have the binding?	def foo<div>&nbsp; &nbsp;a = 1</div><div>&nbsp; &nbsp;binding.local_variable_get(:a) #=> 1</div><div>&nbsp; &nbsp;binding.local_variable_get(:b) #=> NameError</div><div>end</div>
How would you set an existing local variable with the binding?	binding.local_variable_set(:var_name, value_to_set)
How do you get a list of variables in the current scope?	binding.local_variables
How would you find out what a classes super class is?	class Animal<div>end</div><div><br /></div><div>class Dog < Animal</div><div>end</div><div><br /></div><div>Dog.superclass #=> Animal</div>
What is the Comparable class? How do you use it?	"It's a mixin that gives you the ability to compare two class instances using <, <=, ==, >=, and >. It also lets you use the between? method:<div><br /></div><div>class SizeMatters</div><div>&nbsp; &nbsp;include Comparable</div><div>&nbsp; &nbsp;attr :str</div><div>&nbsp; &nbsp;def <=>(other)</div><div>&nbsp; &nbsp; &nbsp; str.size <=> other.str.size</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;def initialize(str)</div><div>&nbsp; &nbsp; &nbsp; @str = str</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;def inspect</div><div>&nbsp; &nbsp; &nbsp; @str</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br /></div><div>s1 = SizeMatters.new(""Z"")</div><div>s2 = SizeMatters.new(""YY"")</div><div>s1 < s2 #=> true</div>"
What does the following do?<div><br /></div><div>[3,1,4,1,5,9].chunk{|n| n.even? }</div>	It chunks them together and creates an array of arrays with the block as the first value. In the case of the above code, doing .to_a on the result gives us:<div><br /></div><div>[ [ false, [3, 1] ], [true, [4] ], [false, [1, 5, 9] ] ]</div>
What does the following do?<div><br /></div><div>[1,2,4,9,10,11].chunk_while {|i, j| i + 1 == j }.to_a</div>	Gives us chunks where each chunk passes the block. As soon as it doens't pass the block, a new chunk is created:<div><br /></div><div>[ [1,2] , [4] , [9,10] , [11] ]</div>
What does the following do?<div><br /></div><div>[1,2,3,4].flat_map{|e| [e, -e ] }</div>	It maps the array and then flattens it.
What does this do?<div><br /></div><div>(1..4).each_cons(3) { |a| p a }</div>	[1,2,3]<div>[2,3,4]</div>
How would you get all prime numbers between one and ten?	require 'prime'<div>Prime.entries 10</div>
(1..10).index(3)<div><br /></div><div>Why won't that work?</div>	It would work for a range but for this you either have to convert it to an array (not ideal):<div><br /></div><div>(1..10).to_a.index(3)</div><div><br /></div><div>or you have to use find_index:</div><div><br /></div><div>(1..10).find_index(3)</div>
<div>What's the fastest way to get an array of all values between 38 and 44 from the following range?</div><div><br /></div><div>(1..100)</div>	(1..100).grep 38..44
What does this do?<div><br /></div><div>c = IO.constants</div><div>c.grep(/SEEK/)</div>	[:SEEK_SET, :SEEK_CUR, :SEEK_END]
What's the inverted version of grep? What does it to?	grep_v<div><br /></div><div>It selects everthing that doesn't match the given pattern.</div>
What does this do?<div><br /></div><div>(1..6).group_by { |i| i % 3 }</div>	Groups them in a hash where the key is the returned value:<div><br /></div><div>{0=>[3,6], 1=>[1,4], 2=>[2,5]}</div>
What does the .lazy Enumberable method do?&nbsp;	It allows us to do thing with an infinite enumerable. For example:<div><br /></div><div>1.upto(Float::INFINITY).map{|x| x * x }.take(10)</div><div><br /></div><div>Will never work because map is trying to convert each value to an array and it will never reach the end of the array. For things like this we do:</div><div><br /></div><div>1.upto(Float::INFINITY).lazy.map{|x| x * x }.take(10).to_a</div><div><br /></div><div>**This wraps it in a lazy enumerable and then to get it out we do .to_a or its alias .force</div>
"Find the longest word with the max method:<div><br /></div><div>words = [""albatross"", ""dog"", ""horse""]</div>"	words.max {|a, b| a.length <=> b.length }<div><br /></div><div>or to select the two longest words:</div><div><br /></div><div>words.max(2) {|a,b| a.length <=> b.length }</div>
What's the other difference between min_by/max_by, and min/max?	If you don't pass any value and just pass a block to min_by and max_by, it will return the object that maximizes or minimizes the value of the block instead of an array.
"What do the following do?<div><br /></div><div>a = [""a"", ""b"", ""c""]</div><div>a.slice_after(""b"").to_a</div><div>a.slice_before(""b"").to_a</div><div><br /></div><div><br /></div>"	"#=>[ [""a"", ""b""], [""c""] ]<div>#=>[ [""a""], [""b"", ""c""] ]</div>"
"Additional ways you can use slice_before and slice_after:<div><br /></div><div>a = [""000"", ""b"", ""999""]</div><div>a.slice_before(/[a-z]/).to_a</div><div><br /></div><div>#=>[[""000""], [""b"", ""999""]]</div><div><br /></div><div>a = [100,200,300]</div><div>a.slice_before(150..250).to_a</div><div><br /></div><div>#=> [[100], [200, 300]]</div><div><br /></div><div>a = [1,""200"", 1.3]</div><div>a.slice_before(String).to_a</div><div><br /></div><div>#=> [ [1], [""200"", 1.3] ]</div><div><br /></div><div>a = [1, 2, 3, 4, 5]</div><div>a.slice_before do |item|</div><div>&nbsp; &nbsp;item % 2 == 0</div><div>end</div><div><br /></div><div>#=> [ [1], [2,3], [4,5] ]</div>"	
How do you use slice_when?	a = [1,2,3,100,101, 102]<div>a.slice_when do |x,y|</div><div>&nbsp; &nbsp;(y - x) > 10</div><div>end</div><div><br /></div><div>**It uses two adjacent values.</div>
How would you uncreate a method?	undef method_name
<div>Explain this solution to returning true if a letter in num1 is repeated three times and a letter in num2 is repeated two times (in a row).</div><div><br /></div><div>def triple_double(num1, num2)</div><div>&nbsp; num1.to_s.scan(/(.)\1\1/).any? { |n| /#{n}{2}/ === num2.to_s } ? 1 : 0</div><div>end</div>	There are two new things to learn from this:<div><br /></div><div>1. The regex /(.)\1\1/ looks for a triple of something and then passes the first character (inside the parenthesis) to scan's result.</div><div>2. The&nbsp;/#{n}{2}/ === num2.to_s returns a boolean if there is a match(this seems like a better way to do this than to create a match instance).</div>
What is a regression?	An input which produces the wrong output.
How would you list all gems? How would you remove old versions of the gem? How would you uninstall the gem?	gem list<div>gem cleanup rjb</div><div>gem uninstall rjb</div>
Show the current text view with byebug (10 or so lines of code including where you are currently at)&nbsp;	list=
How do you require byebug at the command line?	ruby -r byebug file_name.rb
How would you use where with byebug?	First, you give the debugger line an if statement like:<div><br /></div><div>debugger if your_condition</div><div><br /></div><div>Then when you run the program and it meets the condition you simply type:</div><div><br /></div><div>where</div><div><br /></div><div>and it will give you the call stack and help you identify where the problem is. This is useful for a program that calls the same method multiple times and you want to find out where this particular time is failing.</div>
How would you make it so that you are no longer displaying something with byebug?	undisplay variable_number<div><br /></div><div>**variable_number is indicated by the line that the display variable is on.</div>
What is the definition of the levenshtein distance of two strings? How do you figure this out visually?	"What's happening here is we add in a column at first and then we're saying, alright if we have the same character(where a meets a) you wouldn't need any edits to make them the same (hence 0). After you fill in enough, here's how it works:<div><br /></div><div>If the two values are the same (where c meets c) you take the minimum of the value to the left, above, and to the left corner. If the two values are not the same, you take the minimum + 1 of the value to the left, above, and to the left corner.<br /><div><br /></div><div><img src=""Screen Shot 2017-01-20 at 6.49.04 PM.png"" /></div></div>"
"Using the following matrix, how you can you tell visually the operations that are being performed?<div><br /></div><div><img src=""Screen Shot 2017-01-20 at 6.49.04 PM.png"" /></div>"	From the bottom result, if you got the number from the diagonal and the numbers are different, it means you changed the character up top (f in this case) to the character directly to the side (d in this case). If you got the number from the diagonal and the numbers are the same, it means you didn't change anything (the characters were the same). If you got the number from the number on the left, it means that you deleted the character.
Code the levenshtein algorithm in Ruby. Here's the skeleton of what you need.<div><br /></div><div>class Dictionary</div><div>&nbsp; &nbsp;def initialize(words)</div><div>&nbsp; &nbsp; &nbsp; @words = words</div><div>&nbsp; &nbsp;end</div><div>&nbsp; &nbsp;def find_most_similar(term)</div><div>&nbsp; &nbsp; return term if @words.include?(term)</div><div>&nbsp; &nbsp; @words.min_by{|dict_word| levenshtein(dict_word, term) }</div><div>&nbsp; end</div><div><br /></div><div>&nbsp; &nbsp;def levenshtein(dict_word, term)</div><div>&nbsp; &nbsp; &nbsp; # your code here</div><div>&nbsp; &nbsp;end&nbsp;</div><div>end</div>	"Your code should look something like the following. The key parts to understand here are:<div><br /></div><div>1. The levenshtein matrix we're creating.</div><div>2. We populate the first column and the first row with numbers.</div><div>3. We then use these foundation pieces to give us the value for every other piece of the array.</div><div>4. The last value in the array is the minimum number of edits we would need to make to change the array.</div><div><br /></div><div><img src=""Screen Shot 2017-01-21 at 6.02.08 AM.png"" /></div>"
"This is a gorgeous solution worth memorizing. What's going on here?<div><br /></div><div><img src=""Screen Shot 2017-01-21 at 9.37.43 AM.png"" /></div>"	Gsub! always returns a value. If no change is made, it returns nil. As well the regex used here looks for matching braces ( &nbsp; () , [], {} &nbsp; &nbsp;) and if it finds any of those it substitues an empty string. It keeps doing this so long as we have a value returned from gsub! using the while loop.<div><br /></div><div>At the very end, if the string is empty then the input was valid. If not, it was not valid.</div>
<div>**Spend some time understanding this solution next time.</div><div><br /></div>How do you find the millionth fibonacci sequence efficiently? Here's the skeleton structure:<div><br /></div><div>def fib(n)</div><div>end</div>	require 'matrix'<div><br /></div><div>fib(n)</div><div>&nbsp; &nbsp;(Matrix[[1,1],[1,0]] ** n)[1,0]</div><div>end</div>
How do you find the least common multiple of an array? The greatest common denominator?	[23,1].reduce(:lcm) #=> 23<div>[23,1].reduce(:gcd) #=> 1</div>
Why would you put something as a private class method?	If you want it to be accessed as part of another method within the class but not have the ability to be called directly.<div><br /></div><div>**This is important because you only want to give the outside world (i.e. classes that access this particular class) access to the things they will call directly. All helper methods should be private.</div>
How can you best make learning an engaging and fun experience?	Learn things to build things. Learning becomes boring when it's has no clear end goal. Without a clear goal, it becomes busy-work. However, if you are building something that you would want to build, learning can become fun.<div><br /></div><div>For most things, start with what you want to build and get a general idea for the things you would need to learn. From there, you can then learn the specifics of the each language or framework based on what you need.</div>
What would y be? Why?<div><br /></div><div>x = 4</div><div>y = x</div><div>x = 10</div><div>p y</div>	Y would be 4 because Integers are immutable objects. Here, x and y are both pointing at the same object. When set x equal to 10, we are changing the object that x is pointing to because numbers are immutable objects.
What is an immutable object?	An immutable object is an object whose state cannot be modified after it is created. For example, let's say we have the following:<div><br /></div><div>x = 4</div><div>y = x</div><div>x += 2</div><div>What does y equal? In this case, y will still equal 4 because it's pointing to the 4 in memory. X on the other hand will change to point to 6 in memory. They are no longer pointing at the same thing.</div>
Immutable - Can't mutate.<div>Mutable - Can mutate.</div>	
Arrays and Strings are mutable objects. Integers are not. Also, the assignment operator in all its forms (+=, =, *=, etc.) creates a new reference in memory. The << operator on the other hand alters the same reference in memory. The arr[key] = value though is not an assignment operator.	
Is the following mutable or immutable? (able to mutate, as in refer to the same object in memory that has now been slightly changed, or immutable, as in now refering to an entirely new object)<div><br /></div><div>my_hash = {}</div><div>my_hash[:key] = :value</div>	It's mutable.
What is the extended version of the following?<div><br /></div><div>def fib(n)</div><div>&nbsp; &nbsp;@values[n] ||= calculate_fib(n)</div><div>end</div>	def fib(n)<div>&nbsp; &nbsp;@values[n] = @values[n] || calculate_fib(n)</div><div>end</div>
What are the following shortcuts in tree view?<div><br /></div><div>a</div><div>A</div><div>m</div>	Add a file to the current folder<div>Add a folder</div><div>Rename/move a file</div>
How do you switch between the tree view and the text editor? The purpose here would be to then add a file with a.	control + 0<div><br /></div><div>The 0 is a zero.</div>
What is indecent exposure as it pertains to Ruby?	Classes should share the bare minimum interface with the outside world. If you don't have a compelling reason to make a method or variable public, hide it (private)
What is a base case?	It's the simplest case you're trying to boil your code down to. Take the following for example:<div><br /></div><div><div>def factorial(n)</div><div>&nbsp; if n == 0 # the base case</div><div>&nbsp; &nbsp; 1</div><div>&nbsp; else # the recursive case</div><div>&nbsp; &nbsp; n * factorial(n - 1)</div><div>&nbsp; end</div><div>end</div></div><div><br /></div><div>We first have the base case and then the recursive case. That's probably a pretty good foundation for future recursion.</div>
What is mathematical induction?	Mathematical induction states that if we can solve for a base case and for the general case (or nth) case, then we have solved for all the cases.
What two things do recursive functions need in order to work correctly?	1. They must have a base case.<div>2. They must iterate towards the base case.<br /><div><br /></div><div><div>def fibonacci(n)</div><div>&nbsp; case n</div><div>&nbsp; when 1</div><div>&nbsp; &nbsp; [1]</div><div>&nbsp; when 2</div><div>&nbsp; &nbsp; [1, 1]</div><div>&nbsp; else</div><div>&nbsp; &nbsp; # uh-oh. calls the same method!</div><div>&nbsp; &nbsp; fibonacci(n)</div><div>&nbsp; end</div><div>end</div></div></div>
"These are good tips for programming recursively:<div><br /></div><div>1. Think about how the problem will reduce towards the base case.</div><div>2. Identify the base case.</div><div>3. Think one level up from the base case.</div><div><br /></div><div>**Those three are the most important for recursion.</div><div><br /></div><div>4. Ensure that your return values from every case are of the same type (all arrays, all numbers, etc.)</div><div>5. Get a stack trace by putting the following code at the top of your file.</div><div><br /></div><div><div>MAX_STACK_SIZE = 200</div><div>tracer = proc do |event|</div><div>&nbsp; if event == 'call' &amp;&amp; caller_locations.length > MAX_STACK_SIZE</div><div>&nbsp; &nbsp; fail ""Probable Stack Overflow""</div><div>&nbsp; end</div><div>end</div><div>set_trace_func(tracer)</div></div>"	
What's the name of each of these steps?<div><br /></div><div>def factorial(n)</div><div>&nbsp; &nbsp;return 1 if n == 1</div><div>&nbsp; &nbsp;n * factorial(n - 1)</div><div>end</div>	<div>def factorial(n)</div><div>&nbsp; &nbsp;return 1 if n == 1 #=> base case</div><div>&nbsp; &nbsp;n * factorial(n - 1) #=> inductive step</div><div>end</div>
If something can be implemented recursively, how else can you also do it?	Iteratively
What's the advantage of recursive versus iterative?	Iterative is usually slightly faster but in a lot of cases the recursive solution is easier to understand, has less bugs, and is easier to prove as true.
How does quick sort work (not just in Ruby)?	Let's say we have an unsorted array like the following:<div><br /></div><div>[5,2,7,3,1,7,9,10]</div><div><br /></div><div>What quicksort does is it takes the first number in the array as a pivot point. In this case that would be 5. It then partitions the elements so that everything smaller than 5 goes on the left and everything bigger than or equal to 5 goes on the right like so:</div><div><br /></div><div>[5,2,7,3,1,7,9,10]</div><div>[1,2,3,5,7,7,9,10]</div><div><br /></div><div>We then keep doing the same thing because now we know for sure that the 5 element is in the right spot and as well, the other elements are at least on the correct side.</div><div><br /></div><div>**Of note here is that supposedly quick sort is one of the fastest sorting algorithms known to man.</div>
What is the actual implementation of quicksort with an array?	<div>def quick_sort(arr)</div><div>&nbsp; return arr if arr.length <= 1</div><div>&nbsp; pivot = [arr.first]</div><div>&nbsp; left_side = arr[1..-1].select{ |el| el < arr.first }</div><div>&nbsp; right_side = arr[1..-1].select{|el| el >= arr.first }</div><div>&nbsp; quick_sort(left_side) + pivot_arr + quick_sort(right_side)</div><div>end</div>
On a deeper level, what is happening with this my_each method? Particularly the Proc.new.call(self[idx]) portion?<div><br /></div><div><div>class Array</div><div>&nbsp; def my_each</div><div>&nbsp; &nbsp; self.length.times do |idx|</div><div>&nbsp; &nbsp; &nbsp; Proc.new.call(self[idx])</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div><div>end</div><div><br /></div><div>result = []</div><div>[1,2,3].my_each { |i| result << i * i }</div><div>result #=> [1,4,9]</div></div>	"There are two really important things to note here:<div><br /></div><div>1. Doing Proc.new.call(self[idx]) is the same as doing the following:</div><div><br /></div><div>class Array</div><div>&nbsp; &nbsp;def my_each(&amp;prc)</div><div>&nbsp; &nbsp; &nbsp; self.length.times do |i|</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prc.call(self[i])</div><div>&nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br /></div><div>What Proc.new does is it reaches upward to the method and says, ""Hey, did you have a block?"". If it does, it accesses that. Supposedly this way is twice as efficient because it doesn't create a new variable in the parameter.</div><div><br /></div><div>2. Proc.new.call(self[idx]) or prc.call(self[idx]) is the same as saying, ""Hey, run everything inside the passed block with the current iteration of self[idx] as your piped value."" In this case, as it's looping through self inside my_each, we're essentially doing:</div><div><br /></div><div>result << 1 * 1</div><div>result << 2 * 2</div><div>result << 3 * 3</div><div><br /></div><div>**This also touches on the idea of closure because technically, when the block is called it shouldn't have access to the result variable that is in another scope. And yet it.</div>"
How do you combine two things on your desktop so that they display in one single display? (on Mac)	Make both things the full size of the desktop and then swipe up with three fingers on the pad. Hover over the top portion of the computer and then drag one of your full desktop elements onto the other. Adjust to control how much of the computer something takes up.
How would you get the digital root of a number? An example is below:<div><br /></div><div>digital_root(1111) #=> 4</div><div><br /></div><div>**You cannot use to_s here</div>	def digitial_root(num)<div>&nbsp; &nbsp;return num if num < 10</div><div>&nbsp; &nbsp;digital_root((num / 10) + (num % 10))</div><div>end</div>
Create a set with Ruby.	"<div>require 'set'</div><div><br /></div><div>alphabet = Set.new((""a""..""z"").to_a)</div><div><br /></div><div>Set is part of the enumerables method. From what I've seen, it is efficient because it is stored in a hash but it's different from a hash in the sense that it does not have key value pairs. It's easy to use with Enumerable objects (i.e. each)</div>"
What is the argument you need to create a new set?	An array.
How would you make it so a program pauses?	sleep(seconds_to_pause)
What are gems used for?	A gem is a piece of code that someone wrote that they figured would be useful to other people. You can find a lot of good gems on github.
Shortcut to navigate between different applications?	Command + Tab (Hold command and hit tab as many times as need to navigate between the tabs)
<div>What does the following return?</div><div><br /></div><div>def range</div><div>&nbsp; [1,2,3,4] << 5</div><div>end</div>	It returns the array [1,2,3,4,5]. This can be helpful for recursion if you're trying to get one array at the end.
What is BFS vs DFS&nbsp;	"Depth First Search - This is a similar idea to merge sort (but backwards) where we start at the root element and then begin sorting, giving preference to the left. The looks like this:<div><br /></div><div><img src=""Screen Shot 2017-01-26 at 7.52.05 PM.png"" /></div><div><br /></div><div>Breadth First Search - This is the idea where we iterate over all the children, then all of their children, and so on and so forth until we find the answer we're looking for. Think of it as going level by level, not evaluating anything at depth 2 until you've evaluated everything at depth one and so on and so forth.</div>"
What is an ADT?	An abstract data structure. This is a higher level overview of computer science where we take our abstract data structure (an idea of how to best store our data) and then use the particular language's features to store the in that way.
What are the following?<div><br /></div><div>A binary tree, a unary tree, a ternary tree, and a n-ary tree (poly)?</div>	A binary tree has at most two children, a unary tree has at most one child (often also called a linked list), a ternary tree has at most three children, and a n-ary tree has no restrictions on the number of children it can have.
"<img src=""Screen Shot 2017-01-26 at 8.34.50 PM.png"" /><div><br /></div><div>Some things to know about data trees:</div><div><br /></div><div>The depth of the tree is the distance from the root to the deepest leaf. The end points are called the leaves. There is a familiar type relationship between nodes. You can also have subtrees within your tree.</div>"	
When would you choose Breadth First Search over Depth First Search?	Use Breadth First Search if you believe the data you're looking for is near the top. Use Depth First Search if you believe the data you're looking for is near the bottom.
How do you go about building an object oriented program from the ground up (many objects with mutiple dependencies)	Start with your smallest class and build up because the smaller classes are easier to test and they're necessary as we get into the bigger parent classes.
Why is the following not a valid? How would you rewrite it so that each new key has an empty array?<div><br /></div><div>new_hash = Hash.new { [ ] }</div>	new_hash = Hash.new { |h, k| h[k] = [ ] }
What's a good memorization way to think of the spaceship operator?	A good way to think about this is the spaceship operator will look for the smaller of the two values and return a number based on which side (left or right) is smaller. If the left side is smaller, we'll return -1. If the values are equal, we'll return 1. If the value on the right is smaller, it will return 1.
"What does the val in the following syntax gives us with each iteration?<div><br /></div><div>[""my"", ""name"", ""is"", ""Chase""].count.times do |val|</div><div>&nbsp; &nbsp;p val</div><div>end</div>"	Val is actually going to give us the index for each value. So here for example it would do:<div><br /></div><div>0</div><div>1</div><div>2</div><div>3</div><div><br /></div><div>This is good to keep in mind for when you're trying to get the index.</div>
"Why would the following example not be as good as the example after that?<div><br /></div><div>info = [1, ""Chase"" , [""hello"", ""world""], {} ]</div><div><br /></div><div>info.each { |val| puts val }</div><div>info.each { |el| puts el }</div>"	the name el is more general, especially when you don't know what you're looking for. ele on the other hand is more clear that it's just an element and you have no idea what the element is.
Why is this not valid?<div><br /></div><div>result = [[], []]</div><div>[1,2,3].each do |num|</div><div>&nbsp; &nbsp;num < 2 ? result[0] << num : result[1] << num</div><div>end</div>	Trick question. It actually is valid syntax. You can put things inside of the ternary operators.
<div>Why would you do the num % size here?</div><div><br /></div><div>class Array</div><div><br /></div><div><br /></div><div>&nbsp; def my_rotate(num=1)</div><div>&nbsp; &nbsp; rotations = num % size</div><div>&nbsp; &nbsp; rotated_arr = self.dup</div><div><br /></div><div>&nbsp; &nbsp; rotations.times do</div><div>&nbsp; &nbsp; &nbsp; rotated_arr << rotated_arr.shift</div><div>&nbsp; &nbsp; end</div><div><br /></div><div>&nbsp; &nbsp; rotated_arr</div><div>&nbsp; end</div><div><br /></div><div><br /></div><div>end</div>	The reason you would do this is because if you have four rotations and the size of your array is four, you would simply return the array as is because it will end up looking the same.
Why would the following be your base case for quicksort?<div><br /></div><div>def quicksort(arr)</div><div>&nbsp; &nbsp;return arr if arr.count <= 1</div><div>end</div>	Because an array with only one element and even an empty array are technically already sorted.
"Assuming the following inheritance structure:<br /><div><br /></div><div><div>class User</div><div>&nbsp; def initialize(first_name, last_name)</div><div>&nbsp; &nbsp; @first_name = first_name</div><div>&nbsp; &nbsp; @last_name = last_name</div><div>&nbsp; end</div><div>&nbsp; def say_hello(n = 4)</div><div>&nbsp; &nbsp; n.times { p ""goodbye"" }</div><div>&nbsp; end</div><div>end</div><div><br /></div><div>class Administrator < User</div><div>&nbsp; def initialize(first_name, last_name, access_level=[:none])</div><div>&nbsp; &nbsp; super(first_name, last_name)</div><div>&nbsp; &nbsp; @access_level = access_level</div><div>&nbsp; end</div><div>&nbsp;&nbsp;</div><div>&nbsp; def say_hello(n = 10)</div><div>&nbsp; &nbsp; n.times { p ""hello"" }</div><div>&nbsp; &nbsp; super</div><div>&nbsp; end</div><div>end</div></div><div><br /></div><div>What will the following code give us?</div><div><br /></div><div>me = Administrator.new(""Chase"", ""Armstrong"", ""priority"")</div><div><br /></div><div>me.say_hello</div>"	It implicitly knows to pass along the n argument to the parent class.&nbsp;
How would you do conversion between bases without using the built in .to_s method?	"def base_converter(num, b)<div>&nbsp; &nbsp;return """" if num == 0</div><div>&nbsp; &nbsp;digits = %w(0 1 2 3 4 5 6 7 8 9 a b c d e f)</div><div>&nbsp; &nbsp;base_converter(num/b, b) + digits[num % b]</div><div>end</div>"
"What is the e in the following?<div><br /></div><div><img src=""Screen Shot 2017-01-29 at 4.09.36 PM.png"" /></div>"	It is the error being saved to a variable so that we can show what the particular error was.
"How could the following be rewritten? Think implicit begin...<div><br /></div><div>def say_hello</div><div>begin</div><div>&nbsp; &nbsp;p ""Give me number one:""</div><div>&nbsp; &nbsp;number = gets.chomp</div><div>&nbsp; &nbsp;raise ArgumentError unless number.match (/1/)</div><div>rescue ArgumentError</div><div>&nbsp; &nbsp;p ""Oops, invalid argument""</div><div>&nbsp; &nbsp;retry</div><div>end</div><div>end</div>"	"<div>def say_hello</div><div>p ""Give me number one:""</div><div>number = gets.chomp</div><div>raise ArgumentError unless number.match (/1/)</div><div>rescue ArgumentError</div><div>p ""Oops, invalid argument""</div><div>retry</div><div>end</div>"
How do you add an error message to your error?	"raise ArgumentError.new(""Your argument was not a number between one and ten"")"
How would you create your own Error?	class CrazyErrorIJustName < StandardError<div>end</div>
What does nota bene mean?&nbsp;	Take note. This is used a lot with the App Academy specs and such.
How do you make a class a singleton? How would you then create an instance of this class?	<div>require 'singleton'</div><div><br /></div>class NullPiece<div>&nbsp; &nbsp;include Singleton</div><div>&nbsp; &nbsp;def initialize</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br /></div><div>NullPiece.instance&nbsp;</div><div><br /></div><div><br /></div><div>**Can't say new here. Have to say instance.</div>
What folders will you have inside your main directory so that you can run rSpec?	lib<div>spec</div>
What's the non folder file you'll need in your folder? What should this file have inside of it? (think rspec)	Gemfile<div><br /></div><div>Inside of it you will have:</div><div><br /></div><div>gem 'rspec'</div><div><br /></div><div>You'll then run bundle install to install rspec.</div>
<div>rspec</div><div><br /></div>Let's say we create a file in our lib called dessert.rb . What would we be the corresponding file name in our spec folder?	dessert_spec.rb
What do you need to do at the top of your spec file? What's unique about this? Assume the spec file is called dessert_spec.rb	require 'dessert'<div><br /></div><div>What's unique about this is rspec is smart enough to figure out the file is in the lib folder. We won't need to do require_relative or pass in a specific file path.</div>
What does the outermost block do in rspec	Describe the block:<div><br /></div><div>describe Dessert do</div><div><br /></div><div><br /></div><div>end</div>
What usually follows the inner rspec describe?	"describe Dessert do<div>&nbsp; &nbsp;subject(:brownie) { Dessert.new(""brownie"") }<br /><div><br /></div><div>&nbsp; &nbsp;describe '#initialize' do</div><div>&nbsp; &nbsp; &nbsp; it 'takes in a type' do</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect(brownie.type).to eq('brownie')</div><div>&nbsp; &nbsp; &nbsp; end</div><div>&nbsp; &nbsp;end</div><div><br /></div><div><br /></div><div><br /></div><div>end</div></div>"
What do you need to do to your rspec file if you're testing to see if a particular bit of code raises an error?	You'd need to put your expect portion of the test inside of a block. Normally it would be like this:<div><br /></div><div>it 'sets the type to the giant version' do</div><div>&nbsp; &nbsp;expect(brownie.type).to eq('giant brownie')</div><div>end</div><div><br /></div><div>But with an error that we want to get raised to pass the spec we would need to do:</div><div><br /></div><div>it 'raises an error if the amount is not a number' do</div><div>&nbsp; &nbsp;expect { Dessert.new('brownie', 'tons') }.to raise_error('Amount must be a number')</div><div>end</div>
What's the difference between eq and be in rspec?	eq is testing for equivalence while be is testing for the same object in memory (i.e. the two objects being compared are the same object in memory)
What's the difference between subject and let in rspec?	While they both do the same thing (create an object that can later be tested upon), semantically let is used for objects that are not the focus of the tests.&nbsp;
What does the following line of code mean in rspec?<div><br /></div><div>expect(milk).to receive(:dip).with(brownie)</div>	We are expected dip to get called on milk
rspec<div><br /></div><div>What should the argument be for a 'describe' block? What should the argument be for an 'it' block?</div>	A 'describe' block should take a string that has # for instance methods and :: for class methods (of note is you also use describe at the top of your file). An 'it' block takes a string and should describe the behavior that you're testing.
What's a good strategy for building functional, well thought out apps?	Plan from the top down, then build from the bottom up.
"What does the following piece of code do?<div><br /></div><div>let(:customer) { double(""customer"") }</div>"	It allows us to test in isolation (one class at a time) because think for a second if we didn't have our customer class Working quite yet. That would cause a chain reaction that would prevent us from testing anything that uses that class. By creating mock/double customers, we can know that our current class (let's say Administrator for simplicity's sake) is behaving properly.<div><br /></div><div>** A double is used to generate a mock.</div>
"What is the following called? Why do we use it?<div><br /></div><div>allow(customer).to receive(:email_address).and_return(""ned@appacademy.io"")</div>"	It's called a stub. We use if after creating a double and it allows us to force our double to take a certain input and give us back the output we want (hard coded in)
<div>rspec question:</div><div><br /></div>What does the following do within rspec?<div><br /></div><div>before(:each) do</div><div>&nbsp; &nbsp;board.make_move([3,4], [2,3])</div><div>&nbsp; &nbsp;board.make_move([1,2], [4,5])</div><div>end&nbsp;</div><div><br /></div><div>it 'should return true' do&nbsp;</div><div>&nbsp; &nbsp;expect(board.checkmate?(:black)).to be true</div><div>end</div>	That before(:each) will execute before every subsequent nested test. What this allows us to do it create our state. It also allows us to refresh our state between method calls.
What do you use instead of != in rspec?	.to_not<div><div><br /></div><div>** != doesn't work in rspec</div></div><div>** also of note here is that you can user .not_to</div>
"What could you add to the following so you can specify between the two let statement?<div><br /></div><div>subject { Robot.new }</div><div>let { double(""light_item"", :weight => 1 ) }</div><div>let { double(""max_weight_item"", :weight => 250) }</div>"	"<div>subject(:robot) { Robot.new }</div><div>let(:light_item) { double(""light_item"", :weight => 1 ) }</div><div>let(:max_weight_item) { double(""max_weight_item"", :weight => 250) }</div>"
What are the two most important things you learned from Haseeb?	1. You can build anything. Just google whatever it is you need to build and you can figure it out.<div><br /></div><div>2. Write the code you wished you had and then write that code out.</div>
What does RAM stand for?	Random Access Memory
What is pointer arithmetic?	For arrays, our pieces of information are stored right next to each other in memory. That means that if I want to look at a particular index, all I have to do is say array[index] and what happens under the hood is the computer will take the starting value for that array (let's say in this case it is 908) and it will add in the index value that I give it times by 8 (the size of a byte). So if we have the following:<div><br /></div><div>908 #=> Starting value for the array</div><div><br /></div><div>and we want to find the third index, the computer would do:</div><div><br /></div><div>908 + 8 * 3 #=> 932</div><div><br /></div><div>It then accesses that point and it automatically finds the object that I'm referencing without having to go through everything in the array.</div>
What are the two types of complexities that we deal with?	Space (Memory) Complexity:<div><br /></div><div>How does our data size grow in relation to our input size.</div><div><br /></div><div>Time Complexity:</div><div><br /></div><div>How does the time to calculate something grow with relation to our size.&nbsp;</div>
What does the LRU in LRU caching stand for?	Least Recently Used.
What is Ruby's XOR operator? What does it do?	^<div><br /></div><div>It compares that one of the two values is true but not both.</div>
What are the various parts of a good hashing function?	"Deterministic:<div><br /></div><div>Every single time I hash the same object (i.e. ""hello"") the output will be the same.</div><div><br /><div>Uniform:</div><div><br /></div><div>We have little to no data clumping (i.e. objects should rarely if ever have the exact same hash output)</div><div><br /></div><div>One-way:</div><div><br /></div><div>You can't determine from the output what the input was.</div><div><br /></div><div>Highly Sensitive:</div></div><div><br /></div><div>The string ""hello"" and the string ""helli"" should have totally different hash outputs. You shouldn't see patterns.</div>"
How would you find out the hash value on a any object in Ruby?	The Ruby Object class has a hash method that you can call on pretty much any object. Simply do:<div><br /></div><div><br /></div><div>[1,2,3].hash</div>
How do you delete a node in a doubly linked list?	You simply make the parent node refer to the grandchild node and the grandchild node to refer to the parent node. In doing this, our child node gets garbage collected.
What are the following big ohs for a linked list?<div><br /></div><div>find</div><div>push</div><div>unshift</div><div>delete</div><div>insert ** Assuming you have reference to either the node before or the node after.</div>	O(n)<div>O(1)</div><div>O(1)</div><div>O(1)</div><div>O(1)</div>
What is a hash map?	It's where you have a particular key (your hashed key) that points to a particular value. This allows for instant lookup if you have the key.
What is the difference between a hash set and a hash map?	A hash set simply hashes the value and then stores that value in the the set. A hash map on the other hand hashes the key and then stores both the key and the value inside of an object.
What does the following do?<div><br /></div><div>bundle exec rspec --example '#initialize'</div>	It gives us just the rspec tests for all things that have the particular value inside of the parenthesis.
What is a heuristic?	A simple rule of thumb.
How can you progress quicker with coding?	If you get stuck for more than 15 minutes on a problem (i.e. if you're not making any good progress for that period of time), just look up the solution. But then try to understand the solution.<div><br /></div><div>Along these same lines, don't move on from one line (or statement in a video) until you understand it. If you don't understand it, dive deeper into the subject so that you can understand it.</div>
How would you create your rails app and specify the database that you want to use?	rails new Cats -d postgresql
What is introspection?	It is the ability for a program to examine itself. An example of this in Ruby is Ruby's ability to see what methods a particular object has (i.e. [ ].methods). In this case, the program (the Ruby language) is analyzing itself.
"Why do we use .send in the following:<div><br /></div><div><div>&nbsp; def method_missing(name, *args)</div><div>&nbsp; &nbsp; # Bone would be the name of the method for the first one.</div><div>&nbsp; &nbsp; info = @snack_box.send(""get_#{name}_info"", @box_id)</div><div>&nbsp; &nbsp; tastiness = @snack_box.send(""get_#{name}_tastiness"", @box_id)</div><div>&nbsp; &nbsp; result = ""Treat: #{info}: #{tastiness}""</div><div>&nbsp; &nbsp; tastiness > 30 ? ""* #{result}"" : result</div><div>&nbsp; end</div></div>"	"Here we use it because we need to interpolate with our variable to determine what method is actually going to be sent to the calling object. We couldn't do this interpolation without .send.<div><br /></div><div>**Also of note is that the second argument is telling us what to call the sent method with. For example, the line:</div><div><br /></div><div>@snack_box.send(""get_#{name}_info"", @box_id)</div><div><br /></div><div>is pretty much the same as (assuming our name variable is 'bone'):</div><div><br /></div><div>@snack_box.get_bone_info(@box_id)</div>"
<div>What do the two variables represent in the following method?</div><div><br /></div><div>def method_missing(name, *args)</div><div>end</div>	"<div>name represents the name of the method that was not found and args represent any arguments that were passed to the non existent method. For example, let's assume we don't have a say_hello_to method. In that case, the following:</div><div><br /></div><div>say_hello_to(""someone"")</div><div><br /></div><div>would be:</div><div><br /></div><div>name #=> :say_hello_to</div><div>args #=> ""someone""</div>"
"What do you call a class method that will define more methods? An example would be:<div><br /></div><div>class Dog</div><div>&nbsp; &nbsp;def self.make_sound(name)</div><div>&nbsp; &nbsp; &nbsp; define_method(name) { puts ""#{name}!"" }<br /></div><div>&nbsp; &nbsp;end</div><div><br /></div><div>&nbsp; &nbsp;makes_sound(:woof)</div><div>&nbsp; &nbsp;makes_sound(:bark)</div><div>&nbsp; &nbsp;marks_sound(:grr)</div><div>end</div>"	A macro.
"What's wrong with the following method call below the example class?<div><br /></div><div>class Dog</div><div>&nbsp; &nbsp;attr_reader :name</div><div><br /></div><div>&nbsp; &nbsp;def initialize(name)</div><div>&nbsp; &nbsp; &nbsp; @name = name</div><div>&nbsp; &nbsp;end</div><div>end</div><div><br /></div><div>kairo = Dog.new(""Kairo"")</div><div>kairo.instance_variable_get(""name"")</div>"	"We need to include the @ symbol. For example:<div><br /></div><div>kairo.instance_variable_get(""@name"")</div>"
What is the API for a Ruby object?	The publicly available methods.
Get a random base64 encoded string in Ruby that is 24 character long.	require 'securerandom'<div><br /></div><div>SecureRandom.base64(16)</div><div><br /></div><div>**Of note here is that the string length will be about 4/3 of the number you pass in to SecureRandom.base64</div>
"What does the following do?<div><br /></div><div>!!""Hello""</div>"	"It converts the value to a boolean (true or false). Basically the first ! gives us false (because ""hello"" is a truthy value) and the second bang gives us the original boolean true (because !false return true).<div><br /></div><div>This is used in rails authentication to verify that a user is signed in.</div>"
